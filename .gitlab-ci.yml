stages:
  - init
  - rpmbuild
  - prepare-rhel-internal
  - test
  - finish

.base:
  before_script:
    - mkdir -p /tmp/artifacts
    - schutzbot/ci_details.sh > /tmp/artifacts/ci-details-before-run.txt
    - cat schutzbot/team_ssh_keys.txt | tee -a ~/.ssh/authorized_keys > /dev/null
    # workaround bug https://issues.redhat.com/browse/RHEL-17890
    - sudo dnf upgrade -y nettle
  after_script:
    - schutzbot/ci_details.sh > /tmp/artifacts/ci-details-after-run.txt || true
    - schutzbot/unregister.sh || true
    - schutzbot/update_github_status.sh update || true
    - schutzbot/save_journal.sh || true
    - schutzbot/upload_artifacts.sh
  interruptible: true
  retry: 1
  tags:
    - terraform
  artifacts:
    paths:
      - "*.repo"
      - COMPOSER_NVR
    when: always

.terraform:
  extends: .base
  tags:
    - terraform

.terraform/openstack:
  extends: .base
  tags:
    - terraform/openstack

.terraform/gcp:
  extends: .base
  tags:
    - terraform/gcp


init:
  stage: init
  interruptible: true
  tags:
    - shell
  script:
    - schutzbot/update_github_status.sh start

.rules_all:
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $RUNNER'

.rules_x86_64:
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $RUNNER =~ "/^.*(x86_64).*$/"'

# At the time of forking the rhel-9.6.0 branch, the RHEL 9.6.0 GA release was not yet available.
# Fix if doing another fix after the 9.6 GA.
.RPM_RUNNERS_RHEL: &RPM_RUNNERS_RHEL
  RUNNER:
    - aws/rhel-9.6-nightly-x86_64
    - aws/rhel-9.6-nightly-aarch64
  INTERNAL_NETWORK: ["true"]

RPM:
  stage: rpmbuild
  extends: .terraform
  rules:
    - !reference [.rules_all, rules]
  script:
    - sh "schutzbot/mockbuild.sh"
  parallel:
    matrix:
      - <<: *RPM_RUNNERS_RHEL

Base:
  stage: test
  extends: .terraform
  rules:
    - !reference [.rules_all, rules]
  script:
    - schutzbot/deploy.sh
    - /usr/libexec/tests/osbuild-composer/base_tests.sh
  parallel:
    matrix:
      - <<: *RPM_RUNNERS_RHEL

.regression:
  stage: test
  extends: .terraform
  rules:
    - !reference [.rules_all, rules]
  script:
    - schutzbot/deploy.sh
    - /usr/libexec/tests/osbuild-composer/${SCRIPT}
  parallel:
    matrix:
      - <<: *RPM_RUNNERS_RHEL

regression-composer-works-behind-satellite-fallback:
  extends: .regression
  variables:
    SCRIPT: regression-composer-works-behind-satellite-fallback.sh

regression-composer-works-behind-satellite:
  extends: .regression
  variables:
    SCRIPT: regression-composer-works-behind-satellite.sh

regression-excluded-dependency:
  extends: .regression
  variables:
    SCRIPT: regression-excluded-dependency.sh

regression-include-excluded-packages:
  extends: .regression
  variables:
    SCRIPT: regression-include-excluded-packages.sh

# This test is supposed to run only on subscribed GA RHEL
# regression-old-worker-new-composer:
#   extends: .regression
#   rules:
#     - !reference [.rules_x86_64, rules]
#   variables:
#     SCRIPT: regression-old-worker-new-composer.sh

regression-insecure-repo:
  extends: .regression
  variables:
    SCRIPT: regression-insecure-repo.sh


regression-no-explicit-rootfs-definition:
  extends: .regression
  variables:
    SCRIPT: regression-no-explicit-rootfs-definition.sh

Image Tests:
  stage: test
  extends: .terraform
  rules:
    - !reference [.rules_all, rules]
  script:
    - schutzbot/deploy.sh
    - /usr/libexec/tests/osbuild-composer/image_tests.sh
  parallel:
    matrix:
      - <<: *RPM_RUNNERS_RHEL

Trigger-rhel-edge-ci:
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
  stage: test
  interruptible: true
  tags:
    - shell
  script:
    - 'curl -u "${SCHUTZBOT_LOGIN}" -X POST -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/osbuild/rhel-edge-ci/dispatches -d "{\"event_type\":\"osbuild-composer-ci\",\"client_payload\":{\"pr_number\":\"${CI_COMMIT_BRANCH}\"}}"'

.integration_base:
  stage: test
  extends: .terraform
  rules:
    - !reference [.rules_all, rules]
  script:
    - schutzbot/deploy.sh
    - /usr/libexec/tests/osbuild-composer/${SCRIPT}

.integration:
  extends: .integration_base
  parallel:
    matrix:
      - <<: *RPM_RUNNERS_RHEL

aws.sh:
  extends: .integration
  rules:
    - !reference [.rules_all, rules]
  variables:
    SCRIPT: aws.sh

oci.sh:
  extends: .integration
  rules:
    - !reference [.rules_x86_64, rules]
  variables:
    SCRIPT: oci.sh

OpenShift_Virtualization:
  extends: .integration
  rules:
    - !reference [.rules_x86_64, rules]
  variables:
    SCRIPT: openshift_virtualization.sh

azure.sh:
  extends: .integration
  rules:
    - !reference [.rules_x86_64, rules]
  variables:
    SCRIPT: azure.sh

azure.sh_hyperv_gen2:
  extends: .integration
  rules:
    - !reference [.rules_x86_64, rules]
  variables:
    SCRIPT: azure_hyperv_gen2.sh

gcp.sh:
  extends: .integration
  rules:
    - !reference [.rules_x86_64, rules]
  variables:
    SCRIPT: gcp.sh

vmware.sh_vmdk:
  extends: .integration
  rules:
    - !reference [.rules_x86_64, rules]
  variables:
    SCRIPT: vmware.sh vmdk

vmware.sh_ova:
  extends: .integration
  rules:
    - !reference [.rules_x86_64, rules]
  variables:
    SCRIPT: vmware.sh ova

filesystem.sh:
  extends: .integration
  rules:
    - !reference [.rules_x86_64, rules]
  parallel:
    matrix:
      - CUSTOMIZATION_TYPE:
          - "filesystem"
          - "disk-plain"
          - "disk-lvm"
        <<: *RPM_RUNNERS_RHEL
        INTERNAL_NETWORK: ["true"]
  variables:
    SCRIPT: filesystem.sh ${CUSTOMIZATION_TYPE}

cross-distro.sh:
  extends: .integration
  rules:
    - !reference [.rules_x86_64, rules]
  variables:
    SCRIPT: cross-distro.sh

.libvirt_integration:
  stage: test
  extends: .terraform/gcp
  rules:
    - !reference [.rules_x86_64, rules]
  script:
    - schutzbot/deploy.sh
    - /usr/libexec/tests/osbuild-composer/${SCRIPT}
  parallel:
    matrix:
      - RUNNER:
          - gcp/rhel-9.6-nightly-x86_64
        INTERNAL_NETWORK: ["true"]

libvirt.sh:
  extends: .libvirt_integration
  variables:
    SCRIPT: libvirt.sh

ubi-wsl.sh:
  stage: test
  extends: .terraform
  rules:
    - !reference [.rules_x86_64, rules]
  script:
    - schutzbot/deploy.sh
    - /usr/libexec/tests/osbuild-composer/ubi-wsl.sh
  parallel:
    matrix:
      - <<: *RPM_RUNNERS_RHEL

weldr-distro-dot-notation+aliases:
  stage: test
  extends: .terraform
  rules:
    - !reference [.rules_x86_64, rules]
  script:
    - schutzbot/deploy.sh
    - /usr/libexec/tests/osbuild-composer/weldr-distro-dot-notation-and-aliases.sh
  parallel:
    matrix:
      - <<: *RPM_RUNNERS_RHEL

.generic_s3:
  extends: .libvirt_integration

generic_s3_http.sh:
  extends: .generic_s3
  variables:
    SCRIPT: generic_s3_http.sh

generic_s3_https_secure.sh:
  extends: .generic_s3
  variables:
    SCRIPT: generic_s3_https_secure.sh

generic_s3_https_insecure.sh:
  extends: .generic_s3
  variables:
    SCRIPT: generic_s3_https_insecure.sh

aws_s3.sh:
  extends: .generic_s3
  variables:
    SCRIPT: aws_s3.sh

NIGHTLY_FAIL:
  stage: finish
  tags:
    - shell
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $NIGHTLY == "true"'
      when: on_failure
  script:
    - schutzbot/slack_notification.sh FAILED ":big-sad:" nightly

NIGHTLY_SUCCESS:
  stage: finish
  tags:
    - shell
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $NIGHTLY == "true"'
  script:
    - schutzbot/slack_notification.sh SUCCESS ":partymeow:" nightly

GA_FAIL:
  stage: finish
  tags:
    - shell
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $NIGHTLY== "false"'
      when: on_failure
  script:
    - schutzbot/slack_notification.sh FAILED ":big-sad:" ga

GA_SUCCESS:
  stage: finish
  tags:
    - shell
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $NIGHTLY== "false"'
  script:
    - schutzbot/slack_notification.sh SUCCESS ":partymeow:" ga

Installer:
  stage: test
  extends: .terraform/openstack
  rules:
    - !reference [.rules_x86_64, rules]
  script:
    - schutzbot/deploy.sh
    - /usr/libexec/tests/osbuild-composer/installers.sh
  parallel:
    matrix:
      - RUNNER:
          - rhos-01/rhel-9.6-nightly-x86_64

ContainerEmbedding:
  stage: test
  extends: .terraform
  rules:
    - !reference [.rules_x86_64, rules]
  script:
    - schutzbot/deploy.sh
    - /usr/libexec/tests/osbuild-composer/container-embedding.sh
  parallel:
    matrix:
      - <<: *RPM_RUNNERS_RHEL

finish:
  stage: finish
  dependencies: []
  tags:
    - shell
  script:
    - schutzbot/update_github_status.sh finish
