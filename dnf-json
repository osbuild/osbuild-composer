#!/usr/bin/python3

import datetime
import dnf
import hawkey
import json
import sys


def timestamp_to_rfc3339(timestamp):
    d = datetime.datetime.utcfromtimestamp(package.buildtime)
    return d.strftime('%Y-%m-%dT%H:%M:%SZ')


hawkey_checksums = {
    hawkey.CHKSUM_MD5: "md5",
    hawkey.CHKSUM_SHA1: "sha1",
    hawkey.CHKSUM_SHA256: "sha256",
    hawkey.CHKSUM_SHA384: "sha384",
    hawkey.CHKSUM_SHA512: "sha512"
}


try:
    command = sys.argv[1]
    arguments = sys.argv[2:]
except IndexError:
    command = "list"
    arguments = []


base = dnf.Base()

base.conf.substitutions["releasever"] = "30"
base.conf.substitutions["basearch"] = "x86_64"

repo = dnf.repo.Repo("fedora", base.conf)
repo.name = "Fedora"
repo.baseurl = "http://download.fedoraproject.org/pub/fedora/linux/releases/30/Everything/x86_64/os"

base.repos.add(repo)
base.fill_sack(load_system_repo=False)
base.read_comps()

if command == "list":
    packages = [p.name for p in base.sack.query().available()]
    json.dump(packages, sys.stdout)

elif command == "dump":
    packages = []
    for package in base.sack.query().available():
        packages.append({
            "name": package.name,
            "summary": package.summary,
            "description": package.description,
            "url": package.url,
            "href": package.relativepath,
            "epoch": package.epoch,
            "version": package.version,
            "release": package.release,
            "arch": package.arch,
            "buildtime": timestamp_to_rfc3339(package.buildtime),
            "license": package.license
        })
    json.dump(packages, sys.stdout)

elif command == "depsolve":
    for pkgspec in arguments:
        if pkgspec.startswith("@"):
            base.group_install(pkgspec[1:].lower(), ("mandatory", "default"))
        else:
            base.install(pkgspec)
    base.resolve()
    packages = []
    for package in base.transaction.install_set:
        baseurl = base.repos[package.reponame].baseurl[0]
        algorithm, checksum = hawkey_checksums[package.chksum[0]], package.chksum[1].hex()
        packages.append({
            "name": package.name,
            "epoch": package.epoch,
            "version": package.version,
            "release": package.release,
            "arch": package.arch,
            "checksum": f"{algorithm}:{checksum}",
            "url": f"{baseurl}/{package.relativepath}"
        })
    json.dump(packages, sys.stdout)
