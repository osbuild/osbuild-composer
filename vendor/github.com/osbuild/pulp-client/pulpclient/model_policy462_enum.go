/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pulpclient

import (
	"encoding/json"
	"fmt"
)

// Policy462Enum * `immediate` - immediate * `on_demand` - on_demand
type Policy462Enum string

// List of Policy462Enum
const (
	POLICY462ENUM_IMMEDIATE Policy462Enum = "immediate"
	POLICY462ENUM_ON_DEMAND Policy462Enum = "on_demand"
)

// All allowed values of Policy462Enum enum
var AllowedPolicy462EnumEnumValues = []Policy462Enum{
	"immediate",
	"on_demand",
}

func (v *Policy462Enum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Policy462Enum(value)
	for _, existing := range AllowedPolicy462EnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Policy462Enum", value)
}

// NewPolicy462EnumFromValue returns a pointer to a valid Policy462Enum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicy462EnumFromValue(v string) (*Policy462Enum, error) {
	ev := Policy462Enum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Policy462Enum: valid values are %v", v, AllowedPolicy462EnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Policy462Enum) IsValid() bool {
	for _, existing := range AllowedPolicy462EnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Policy462Enum value
func (v Policy462Enum) Ptr() *Policy462Enum {
	return &v
}

type NullablePolicy462Enum struct {
	value *Policy462Enum
	isSet bool
}

func (v NullablePolicy462Enum) Get() *Policy462Enum {
	return v.value
}

func (v *NullablePolicy462Enum) Set(val *Policy462Enum) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicy462Enum) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicy462Enum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicy462Enum(val *Policy462Enum) *NullablePolicy462Enum {
	return &NullablePolicy462Enum{value: val, isSet: true}
}

func (v NullablePolicy462Enum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicy462Enum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

