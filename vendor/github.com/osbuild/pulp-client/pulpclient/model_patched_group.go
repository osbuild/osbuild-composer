/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pulpclient

import (
	"encoding/json"
)

// checks if the PatchedGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedGroup{}

// PatchedGroup Serializer for Group.
type PatchedGroup struct {
	// Name
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchedGroup PatchedGroup

// NewPatchedGroup instantiates a new PatchedGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedGroup() *PatchedGroup {
	this := PatchedGroup{}
	return &this
}

// NewPatchedGroupWithDefaults instantiates a new PatchedGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedGroupWithDefaults() *PatchedGroup {
	this := PatchedGroup{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedGroup) SetName(v string) {
	o.Name = &v
}

func (o PatchedGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchedGroup) UnmarshalJSON(bytes []byte) (err error) {
	varPatchedGroup := _PatchedGroup{}

	if err = json.Unmarshal(bytes, &varPatchedGroup); err == nil {
		*o = PatchedGroup(varPatchedGroup)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchedGroup struct {
	value *PatchedGroup
	isSet bool
}

func (v NullablePatchedGroup) Get() *PatchedGroup {
	return v.value
}

func (v *NullablePatchedGroup) Set(val *PatchedGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedGroup(val *PatchedGroup) *NullablePatchedGroup {
	return &NullablePatchedGroup{value: val, isSet: true}
}

func (v NullablePatchedGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


