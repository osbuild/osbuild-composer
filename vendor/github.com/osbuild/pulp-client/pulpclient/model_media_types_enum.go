/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pulpclient

import (
	"encoding/json"
	"fmt"
)

// MediaTypesEnum * `application/vnd.docker.distribution.manifest.v1+json` - application/vnd.docker.distribution.manifest.v1+json * `application/vnd.docker.distribution.manifest.v2+json` - application/vnd.docker.distribution.manifest.v2+json * `application/vnd.docker.distribution.manifest.list.v2+json` - application/vnd.docker.distribution.manifest.list.v2+json * `application/vnd.oci.image.manifest.v1+json` - application/vnd.oci.image.manifest.v1+json * `application/vnd.oci.image.index.v1+json` - application/vnd.oci.image.index.v1+json
type MediaTypesEnum string

// List of MediaTypesEnum
const (
	MEDIATYPESENUM_DOCKER_DISTRIBUTION_MANIFEST_V1JSON MediaTypesEnum = "application/vnd.docker.distribution.manifest.v1+json"
	MEDIATYPESENUM_DOCKER_DISTRIBUTION_MANIFEST_V2JSON MediaTypesEnum = "application/vnd.docker.distribution.manifest.v2+json"
	MEDIATYPESENUM_DOCKER_DISTRIBUTION_MANIFEST_LIST_V2JSON MediaTypesEnum = "application/vnd.docker.distribution.manifest.list.v2+json"
	MEDIATYPESENUM_OCI_IMAGE_MANIFEST_V1JSON MediaTypesEnum = "application/vnd.oci.image.manifest.v1+json"
	MEDIATYPESENUM_OCI_IMAGE_INDEX_V1JSON MediaTypesEnum = "application/vnd.oci.image.index.v1+json"
)

// All allowed values of MediaTypesEnum enum
var AllowedMediaTypesEnumEnumValues = []MediaTypesEnum{
	"application/vnd.docker.distribution.manifest.v1+json",
	"application/vnd.docker.distribution.manifest.v2+json",
	"application/vnd.docker.distribution.manifest.list.v2+json",
	"application/vnd.oci.image.manifest.v1+json",
	"application/vnd.oci.image.index.v1+json",
}

func (v *MediaTypesEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MediaTypesEnum(value)
	for _, existing := range AllowedMediaTypesEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MediaTypesEnum", value)
}

// NewMediaTypesEnumFromValue returns a pointer to a valid MediaTypesEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMediaTypesEnumFromValue(v string) (*MediaTypesEnum, error) {
	ev := MediaTypesEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MediaTypesEnum: valid values are %v", v, AllowedMediaTypesEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MediaTypesEnum) IsValid() bool {
	for _, existing := range AllowedMediaTypesEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MediaTypesEnum value
func (v MediaTypesEnum) Ptr() *MediaTypesEnum {
	return &v
}

type NullableMediaTypesEnum struct {
	value *MediaTypesEnum
	isSet bool
}

func (v NullableMediaTypesEnum) Get() *MediaTypesEnum {
	return v.value
}

func (v *NullableMediaTypesEnum) Set(val *MediaTypesEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaTypesEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaTypesEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaTypesEnum(val *MediaTypesEnum) *NullableMediaTypesEnum {
	return &NullableMediaTypesEnum{value: val, isSet: true}
}

func (v NullableMediaTypesEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaTypesEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

