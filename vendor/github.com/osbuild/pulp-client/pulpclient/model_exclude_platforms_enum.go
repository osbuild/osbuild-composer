/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pulpclient

import (
	"encoding/json"
	"fmt"
)

// ExcludePlatformsEnum * `windows` - windows * `macos` - macos * `freebsd` - freebsd * `linux` - linux
type ExcludePlatformsEnum string

// List of ExcludePlatformsEnum
const (
	EXCLUDEPLATFORMSENUM_WINDOWS ExcludePlatformsEnum = "windows"
	EXCLUDEPLATFORMSENUM_MACOS ExcludePlatformsEnum = "macos"
	EXCLUDEPLATFORMSENUM_FREEBSD ExcludePlatformsEnum = "freebsd"
	EXCLUDEPLATFORMSENUM_LINUX ExcludePlatformsEnum = "linux"
)

// All allowed values of ExcludePlatformsEnum enum
var AllowedExcludePlatformsEnumEnumValues = []ExcludePlatformsEnum{
	"windows",
	"macos",
	"freebsd",
	"linux",
}

func (v *ExcludePlatformsEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExcludePlatformsEnum(value)
	for _, existing := range AllowedExcludePlatformsEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExcludePlatformsEnum", value)
}

// NewExcludePlatformsEnumFromValue returns a pointer to a valid ExcludePlatformsEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExcludePlatformsEnumFromValue(v string) (*ExcludePlatformsEnum, error) {
	ev := ExcludePlatformsEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExcludePlatformsEnum: valid values are %v", v, AllowedExcludePlatformsEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExcludePlatformsEnum) IsValid() bool {
	for _, existing := range AllowedExcludePlatformsEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExcludePlatformsEnum value
func (v ExcludePlatformsEnum) Ptr() *ExcludePlatformsEnum {
	return &v
}

type NullableExcludePlatformsEnum struct {
	value *ExcludePlatformsEnum
	isSet bool
}

func (v NullableExcludePlatformsEnum) Get() *ExcludePlatformsEnum {
	return v.value
}

func (v *NullableExcludePlatformsEnum) Set(val *ExcludePlatformsEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableExcludePlatformsEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableExcludePlatformsEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExcludePlatformsEnum(val *ExcludePlatformsEnum) *NullableExcludePlatformsEnum {
	return &NullableExcludePlatformsEnum{value: val, isSet: true}
}

func (v NullableExcludePlatformsEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExcludePlatformsEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

