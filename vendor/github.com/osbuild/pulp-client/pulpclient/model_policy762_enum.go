/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pulpclient

import (
	"encoding/json"
	"fmt"
)

// Policy762Enum * `immediate` - When syncing, download all metadata and content now. * `on_demand` - When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests. * `streamed` - When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again.
type Policy762Enum string

// List of Policy762Enum
const (
	POLICY762ENUM_IMMEDIATE Policy762Enum = "immediate"
	POLICY762ENUM_ON_DEMAND Policy762Enum = "on_demand"
	POLICY762ENUM_STREAMED Policy762Enum = "streamed"
)

// All allowed values of Policy762Enum enum
var AllowedPolicy762EnumEnumValues = []Policy762Enum{
	"immediate",
	"on_demand",
	"streamed",
}

func (v *Policy762Enum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Policy762Enum(value)
	for _, existing := range AllowedPolicy762EnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Policy762Enum", value)
}

// NewPolicy762EnumFromValue returns a pointer to a valid Policy762Enum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicy762EnumFromValue(v string) (*Policy762Enum, error) {
	ev := Policy762Enum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Policy762Enum: valid values are %v", v, AllowedPolicy762EnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Policy762Enum) IsValid() bool {
	for _, existing := range AllowedPolicy762EnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Policy762Enum value
func (v Policy762Enum) Ptr() *Policy762Enum {
	return &v
}

type NullablePolicy762Enum struct {
	value *Policy762Enum
	isSet bool
}

func (v NullablePolicy762Enum) Get() *Policy762Enum {
	return v.value
}

func (v *NullablePolicy762Enum) Set(val *Policy762Enum) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicy762Enum) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicy762Enum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicy762Enum(val *Policy762Enum) *NullablePolicy762Enum {
	return &NullablePolicy762Enum{value: val, isSet: true}
}

func (v NullablePolicy762Enum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicy762Enum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

