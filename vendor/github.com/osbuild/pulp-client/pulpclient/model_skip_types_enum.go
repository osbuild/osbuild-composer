/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pulpclient

import (
	"encoding/json"
	"fmt"
)

// SkipTypesEnum * `srpm` - srpm * `treeinfo` - treeinfo
type SkipTypesEnum string

// List of SkipTypesEnum
const (
	SKIPTYPESENUM_SRPM SkipTypesEnum = "srpm"
	SKIPTYPESENUM_TREEINFO SkipTypesEnum = "treeinfo"
)

// All allowed values of SkipTypesEnum enum
var AllowedSkipTypesEnumEnumValues = []SkipTypesEnum{
	"srpm",
	"treeinfo",
}

func (v *SkipTypesEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SkipTypesEnum(value)
	for _, existing := range AllowedSkipTypesEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SkipTypesEnum", value)
}

// NewSkipTypesEnumFromValue returns a pointer to a valid SkipTypesEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSkipTypesEnumFromValue(v string) (*SkipTypesEnum, error) {
	ev := SkipTypesEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SkipTypesEnum: valid values are %v", v, AllowedSkipTypesEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SkipTypesEnum) IsValid() bool {
	for _, existing := range AllowedSkipTypesEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SkipTypesEnum value
func (v SkipTypesEnum) Ptr() *SkipTypesEnum {
	return &v
}

type NullableSkipTypesEnum struct {
	value *SkipTypesEnum
	isSet bool
}

func (v NullableSkipTypesEnum) Get() *SkipTypesEnum {
	return v.value
}

func (v *NullableSkipTypesEnum) Set(val *SkipTypesEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSkipTypesEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSkipTypesEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkipTypesEnum(val *SkipTypesEnum) *NullableSkipTypesEnum {
	return &NullableSkipTypesEnum{value: val, isSet: true}
}

func (v NullableSkipTypesEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkipTypesEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

