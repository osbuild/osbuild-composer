/*
Pulp 3 API

Fetch, Upload, Organize, and Distribute Software Packages

API version: v3
Contact: pulp-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pulpclient

import (
	"encoding/json"
	"time"
)

// checks if the RepoMetadataResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepoMetadataResponse{}

// RepoMetadataResponse A serializer to display RepositoryVersion metadata.
type RepoMetadataResponse struct {
	Published time.Time `json:"published"`
	AdditionalProperties map[string]interface{}
}

type _RepoMetadataResponse RepoMetadataResponse

// NewRepoMetadataResponse instantiates a new RepoMetadataResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepoMetadataResponse(published time.Time) *RepoMetadataResponse {
	this := RepoMetadataResponse{}
	this.Published = published
	return &this
}

// NewRepoMetadataResponseWithDefaults instantiates a new RepoMetadataResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepoMetadataResponseWithDefaults() *RepoMetadataResponse {
	this := RepoMetadataResponse{}
	return &this
}

// GetPublished returns the Published field value
func (o *RepoMetadataResponse) GetPublished() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Published
}

// GetPublishedOk returns a tuple with the Published field value
// and a boolean to check if the value has been set.
func (o *RepoMetadataResponse) GetPublishedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Published, true
}

// SetPublished sets field value
func (o *RepoMetadataResponse) SetPublished(v time.Time) {
	o.Published = v
}

func (o RepoMetadataResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepoMetadataResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["published"] = o.Published

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RepoMetadataResponse) UnmarshalJSON(bytes []byte) (err error) {
	varRepoMetadataResponse := _RepoMetadataResponse{}

	if err = json.Unmarshal(bytes, &varRepoMetadataResponse); err == nil {
		*o = RepoMetadataResponse(varRepoMetadataResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "published")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRepoMetadataResponse struct {
	value *RepoMetadataResponse
	isSet bool
}

func (v NullableRepoMetadataResponse) Get() *RepoMetadataResponse {
	return v.value
}

func (v *NullableRepoMetadataResponse) Set(val *RepoMetadataResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRepoMetadataResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRepoMetadataResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepoMetadataResponse(val *RepoMetadataResponse) *NullableRepoMetadataResponse {
	return &NullableRepoMetadataResponse{value: val, isSet: true}
}

func (v NullableRepoMetadataResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepoMetadataResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


