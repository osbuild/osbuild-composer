// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Error defines model for Error.
type Error struct {
	Code string `json:"code"`
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`

	// Message Backward compatibility with workers <= v33, equals reason
	Message     string `json:"message"`
	OperationId string `json:"operation_id"`
	Reason      string `json:"reason"`
}

// GetJobResponse defines model for GetJobResponse.
type GetJobResponse struct {
	Canceled bool   `json:"canceled"`
	Href     string `json:"href"`
	Id       string `json:"id"`
	Kind     string `json:"kind"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PostWorkersRequest defines model for PostWorkersRequest.
type PostWorkersRequest struct {
	Arch string `json:"arch"`
}

// PostWorkersResponse defines model for PostWorkersResponse.
type PostWorkersResponse struct {
	Href     string             `json:"href"`
	Id       string             `json:"id"`
	Kind     string             `json:"kind"`
	WorkerId openapi_types.UUID `json:"worker_id"`
}

// RequestJobRequest defines model for RequestJobRequest.
type RequestJobRequest struct {
	Arch     string   `json:"arch"`
	Types    []string `json:"types"`
	WorkerId *string  `json:"worker_id,omitempty"`
}

// RequestJobResponse defines model for RequestJobResponse.
type RequestJobResponse struct {
	Args             *json.RawMessage   `json:"args,omitempty"`
	ArtifactLocation string             `json:"artifact_location"`
	DynamicArgs      *[]json.RawMessage `json:"dynamic_args,omitempty"`
	Href             string             `json:"href"`
	Id               string             `json:"id"`
	Kind             string             `json:"kind"`
	Location         string             `json:"location"`
	Type             string             `json:"type"`
}

// StatusResponse defines model for StatusResponse.
type StatusResponse struct {
	Href   string `json:"href"`
	Id     string `json:"id"`
	Kind   string `json:"kind"`
	Status string `json:"status"`
}

// UpdateJobPartial defines model for UpdateJobPartial.
type UpdateJobPartial struct {
	Partial json.RawMessage `json:"partial"`
}

// UpdateJobRequest defines model for UpdateJobRequest.
type UpdateJobRequest struct {
	union json.RawMessage
}

// UpdateJobResponse defines model for UpdateJobResponse.
type UpdateJobResponse = ObjectReference

// UpdateJobResult defines model for UpdateJobResult.
type UpdateJobResult struct {
	Result json.RawMessage `json:"result"`
}

// RequestJobJSONRequestBody defines body for RequestJob for application/json ContentType.
type RequestJobJSONRequestBody = RequestJobRequest

// UpdateJobJSONRequestBody defines body for UpdateJob for application/json ContentType.
type UpdateJobJSONRequestBody = UpdateJobRequest

// PostWorkersJSONRequestBody defines body for PostWorkers for application/json ContentType.
type PostWorkersJSONRequestBody = PostWorkersRequest

// AsUpdateJobResult returns the union data inside the UpdateJobRequest as a UpdateJobResult
func (t UpdateJobRequest) AsUpdateJobResult() (UpdateJobResult, error) {
	var body UpdateJobResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateJobResult overwrites any union data inside the UpdateJobRequest as the provided UpdateJobResult
func (t *UpdateJobRequest) FromUpdateJobResult(v UpdateJobResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateJobResult performs a merge with any union data inside the UpdateJobRequest, using the provided UpdateJobResult
func (t *UpdateJobRequest) MergeUpdateJobResult(v UpdateJobResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateJobPartial returns the union data inside the UpdateJobRequest as a UpdateJobPartial
func (t UpdateJobRequest) AsUpdateJobPartial() (UpdateJobPartial, error) {
	var body UpdateJobPartial
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateJobPartial overwrites any union data inside the UpdateJobRequest as the provided UpdateJobPartial
func (t *UpdateJobRequest) FromUpdateJobPartial(v UpdateJobPartial) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateJobPartial performs a merge with any union data inside the UpdateJobRequest, using the provided UpdateJobPartial
func (t *UpdateJobRequest) MergeUpdateJobPartial(v UpdateJobPartial) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateJobRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateJobRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Request a job
	// (POST /jobs)
	RequestJob(ctx echo.Context) error
	// Get running job
	// (GET /jobs/{token})
	GetJob(ctx echo.Context, token string) error
	// Update a running job
	// (PATCH /jobs/{token})
	UpdateJob(ctx echo.Context, token string) error
	// Upload an artifact
	// (PUT /jobs/{token}/artifacts/{name})
	UploadJobArtifact(ctx echo.Context, token string, name string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
	// status
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Create a new worker
	// (POST /workers)
	PostWorkers(ctx echo.Context) error
	// Refresh worker status
	// (POST /workers/{worker_id}/status)
	PostWorkerStatus(ctx echo.Context, workerId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// RequestJob converts echo context to params.
func (w *ServerInterfaceWrapper) RequestJob(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestJob(ctx)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", ctx.Param("token"), &token, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetJob(ctx, token)
	return err
}

// UpdateJob converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", ctx.Param("token"), &token, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateJob(ctx, token)
	return err
}

// UploadJobArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) UploadJobArtifact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", ctx.Param("token"), &token, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadJobArtifact(ctx, token, name)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// PostWorkers converts echo context to params.
func (w *ServerInterfaceWrapper) PostWorkers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWorkers(ctx)
	return err
}

// PostWorkerStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostWorkerStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "worker_id" -------------
	var workerId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "worker_id", ctx.Param("worker_id"), &workerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter worker_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWorkerStatus(ctx, workerId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.POST(baseURL+"/jobs", wrapper.RequestJob)
	router.GET(baseURL+"/jobs/:token", wrapper.GetJob)
	router.PATCH(baseURL+"/jobs/:token", wrapper.UpdateJob)
	router.PUT(baseURL+"/jobs/:token/artifacts/:name", wrapper.UploadJobArtifact)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/workers", wrapper.PostWorkers)
	router.POST(baseURL+"/workers/:worker_id/status", wrapper.PostWorkerStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"LcEcn2kkanmO2NaH2/XfAQAA///1vRKCORwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
