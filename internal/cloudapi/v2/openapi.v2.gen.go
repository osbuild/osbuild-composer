// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string `json:"installation_device,omitempty"`
	Kernel             *Kernel `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream *string            `json:"datastream,omitempty"`
	ProfileId  string             `json:"profile_id"`
	Tailoring  *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string `json:"installation_device,omitempty"`
	Kernel             *Kernel `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *Services     `json:"services,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
