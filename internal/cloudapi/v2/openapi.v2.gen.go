// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// Upload options for AWS images.
// You have specify share_with_accounts, or public. Otherwise, the request
// will be rejected because no one will be able to launch the image.
type AWSEC2UploadOptions struct {
	// If set to true, the resulting AMI will be made public. This means
	// that every AWS account will be able to use it.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`

	// An array of AWS accounts that will be able to launch the uploaded
	// AMI.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	SnapshotName      *string   `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name   *string `json:"name,omitempty"`
	Source string  `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container  `json:"containers,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`
	Packages   *[]string     `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
