// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for AzureUploadOptionsHyperVGeneration.
const (
	AzureUploadOptionsHyperVGenerationV1 AzureUploadOptionsHyperVGeneration = "V1"

	AzureUploadOptionsHyperVGenerationV2 AzureUploadOptionsHyperVGeneration = "V2"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Choose the VM Image HyperV generation, different features on Azure are available
	// depending on the HyperV generation.
	HyperVGeneration *AzureUploadOptionsHyperVGeneration `json:"hyper_v_generation,omitempty"`

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// Choose the VM Image HyperV generation, different features on Azure are available
// depending on the HyperV generation.
type AzureUploadOptionsHyperVGeneration string

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	Cacerts *CACertsCustomization `json:"cacerts,omitempty"`

	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CACertsCustomization defines model for CACertsCustomization.
type CACertsCustomization struct {
	PemCerts []string `json:"pem_certs"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Cacerts    *CACertsCustomization `json:"cacerts,omitempty"`
	Containers *[]Container          `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// DepsolveRequest defines model for DepsolveRequest.
type DepsolveRequest struct {
	Architecture string        `json:"architecture"`
	Blueprint    Blueprint     `json:"blueprint"`
	Distribution string        `json:"distribution"`
	Repositories *[]Repository `json:"repositories,omitempty"`
}

// DepsolveResponse defines model for DepsolveResponse.
type DepsolveResponse struct {
	// Package list including NEVRA
	Packages []PackageMetadata `json:"packages"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally.
	LocalSave bool `json:"local_save"`
}

// LocalUploadStatus defines model for LocalUploadStatus.
type LocalUploadStatus struct {
	ArtifactPath string `json:"artifact_path"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch string `json:"arch"`

	// Optional package checksum using ALGO:HASH form
	Checksum  *string `json:"checksum,omitempty"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    *string `json:"sigmd5,omitempty"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// PostDepsolveBlueprintJSONBody defines parameters for PostDepsolveBlueprint.
type PostDepsolveBlueprintJSONBody DepsolveRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// PostDepsolveBlueprintJSONRequestBody defines body for PostDepsolveBlueprint for application/json ContentType.
type PostDepsolveBlueprintJSONRequestBody PostDepsolveBlueprintJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Depsolve one or more blueprints
	// (POST /depsolve/blueprint)
	PostDepsolveBlueprint(ctx echo.Context) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// PostDepsolveBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) PostDepsolveBlueprint(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDepsolveBlueprint(ctx)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.POST(baseURL+"/depsolve/blueprint", wrapper.PostDepsolveBlueprint)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
