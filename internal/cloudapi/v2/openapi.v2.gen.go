// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`
	Packages   *[]string     `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`
	Users               *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string `json:"code"`
	OperationId string `json:"operation_id"`
	Reason      string `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string         `json:"architecture"`
	ImageType     ImageTypes     `json:"image_type"`
	Ostree        *OSTree        `json:"ostree,omitempty"`
	Repositories  []Repository   `json:"repositories"`
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`
	Rhsm        bool      `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// UploadOptions defines model for UploadOptions.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
