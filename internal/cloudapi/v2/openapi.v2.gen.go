// Package v2 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	ImageStatus ImageStatus `json:"image_status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Code        string `json:"code"`
	OperationId string `json:"operation_id"`
	Reason      string `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region *string `json:"region,omitempty"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	Repositories  []Repository  `json:"repositories"`
	UploadOptions UploadOptions `json:"upload_options"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       ImageStatusValue `json:"status"`
	UploadStatus *UploadStatus    `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// List of ImageStatusValue
const (
	ImageStatusValue_building    ImageStatusValue = "building"
	ImageStatusValue_failure     ImageStatusValue = "failure"
	ImageStatusValue_pending     ImageStatusValue = "pending"
	ImageStatusValue_registering ImageStatusValue = "registering"
	ImageStatusValue_success     ImageStatusValue = "success"
	ImageStatusValue_uploading   ImageStatusValue = "uploading"
)

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_aws            ImageTypes = "aws"
	ImageTypes_azure          ImageTypes = "azure"
	ImageTypes_edge_commit    ImageTypes = "edge-commit"
	ImageTypes_edge_installer ImageTypes = "edge-installer"
	ImageTypes_gcp            ImageTypes = "gcp"
)

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// UploadOptions defines model for UploadOptions.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {

	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Build a compose
	// (POST /composes/{id}/build)
	PostBuild(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostBuild converts echo context to params.
func (w *ServerInterfaceWrapper) PostBuild(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBuild(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/compose", wrapper.PostCompose)
	router.GET("/composes/:id", wrapper.GetComposeStatus)
	router.POST("/composes/:id/build", wrapper.PostBuild)
	router.GET("/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET("/errors", wrapper.GetErrorList)
	router.GET("/errors/:id", wrapper.GetError)
	router.GET("/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
