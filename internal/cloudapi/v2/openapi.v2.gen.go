// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`
	Files              *[]File             `json:"files,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap           *OpenSCAP           `json:"openscap,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"pIqG+QjOH1//fwAAAP//Qp+IaH18AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
