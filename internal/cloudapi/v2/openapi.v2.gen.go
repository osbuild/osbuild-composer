// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`
	Files              *[]File             `json:"files,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap           *OpenSCAP           `json:"openscap,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Z3xnPDYGY9JrTUfFyvyxdav3h/ylcnIN2+S465Zu526j26GFLuo8vpTenPbtXRP2ipOry4pnmNW2h2b8",
	"aDQck8X90wi1r5fe6/Xxbf+Z3t71FvP+vbGcmKXns8bcey32xLSg3VyWl9ArLh3e9E4ur1w0m9/eDZb2",
	"mKzexHT1ajD6iNH5yl28mvP7hSCk3yiYw45XuHocsZdirex0Hkb1tjapV2fa5fno3OjPbDK7KIxJ0Xio",
	"NgewVqxeVpbT4kxMUGXe0+6e6d2t12s98svhvFh8uHhpru6Qtzpq1LWHwkvH6tdnleFjbzomx6j7aq5w",
	"/7a4sEsvF2eDnubZixk/aR559sws0dGkyivvzuv8rli/oKPlU7U8hb3a0/DoxnpFaEwax8Vn+mhNtFLP",
	"HR5NjVc65awjXht3k4fXo5f5eWPgMv2pyaaXk6tZ+cod9JrLkbXk903esi5KY1K89pblJ9hvFc1yt3an",
	"9fWrgvY2pcWGprFp69nDyyeGa9g76T+7jbdRwRi+3zhc75qkUXh77Y0Jbtx7tuHV696b9VRYiPJEECzM",
	"AX+bWsu+N315qL5OqtZMnDes3kPh+bleLb9Z17Xeojlo3jdbYyLOzi9enwZzzemYvbN+qTdsNl6dx9mk",
	"cmVdj/ql6+fWCj6VLI3YzfC9dnk1h87jVG/X5mOiOdoRvr+6bbX6rXazWT3HnQ66PHaYdX5Z9x75/XW/",
	"Xy6+1LRXiyxfGudNR8lQ+2LROG8vZt0xaS26F+f39Krd5O1W66XdXHTal2anfV5tNtvm7H7d++jmpVmo",
	"t15c014Nm68vl9Z01bPGpHBkHL/fGY/zyWW52HmrzLr12/PWTZFcPx+1HkqONx8evY28YeXpmrUqTuXC",
	"s4XbG3SuetfCqXXOxqTELt6fm3RUWrknL93GdfNM77fbt6tpc8rp00Oj/vLgtY8KEzJlIzQoXw9u28bq",
	"rl0/fjpp1PDt45g4teHRhN+fLert8jWz9Wa/2j/z6Oq1NMTiAr5We/fXj+Jo1IGlKuYvw4v29J3W714a",
	"j5Wr21mtOCbm25PZKN8UJk658z6sjxqVp87ZpGTPp9WuPV+a3bceMkul9+eXpcNehq9XV21j/m4c2TfD",
	"Y29pXo7JdFm4Kq7s1/I1nlyw44tmc3V78vDEmq/DxbBf7GjTUWPRaZPlbHjmrd6cp8Xj/Kb17HW6j41b",
	"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",
	"K8ofewAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
