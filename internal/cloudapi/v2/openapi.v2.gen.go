// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream *string            `json:"datastream,omitempty"`
	ProfileId  string             `json:"profile_id"`
	Tailoring  *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *Services     `json:"services,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
