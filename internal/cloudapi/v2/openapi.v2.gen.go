// Package v2 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions struct {
	Region string                    `json:"region"`
	S3     AWSUploadRequestOptionsS3 `json:"s3"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	Ec2    AWSUploadRequestOptionsEc2 `json:"ec2"`
	Region string                     `json:"region"`
	S3     AWSUploadRequestOptionsS3  `json:"s3"`
}

// AWSUploadRequestOptionsEc2 defines model for AWSUploadRequestOptionsEc2.
type AWSUploadRequestOptionsEc2 struct {
	AccessKeyId       string    `json:"access_key_id"`
	SecretAccessKey   string    `json:"secret_access_key"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	SnapshotName      *string   `json:"snapshot_name,omitempty"`
}

// AWSUploadRequestOptionsS3 defines model for AWSUploadRequestOptionsS3.
type AWSUploadRequestOptionsS3 struct {
	AccessKeyId     string `json:"access_key_id"`
	Bucket          string `json:"bucket"`
	SecretAccessKey string `json:"secret_access_key"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	ImageStatus ImageStatus `json:"image_status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Code        string `json:"code"`
	OperationId string `json:"operation_id"`
	Reason      string `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region *string `json:"region,omitempty"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     string        `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	Repositories  []Repository  `json:"repositories"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       ImageStatusValue `json:"status"`
	UploadStatus *UploadStatus    `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// List of ImageStatusValue
const (
	ImageStatusValue_building    ImageStatusValue = "building"
	ImageStatusValue_failure     ImageStatusValue = "failure"
	ImageStatusValue_pending     ImageStatusValue = "pending"
	ImageStatusValue_registering ImageStatusValue = "registering"
	ImageStatusValue_success     ImageStatusValue = "success"
	ImageStatusValue_uploading   ImageStatusValue = "uploading"
)

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {

	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /compose/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /compose/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/compose", wrapper.PostCompose)
	router.GET("/compose/:id", wrapper.GetComposeStatus)
	router.GET("/compose/:id/metadata", wrapper.GetComposeMetadata)
	router.GET("/errors", wrapper.GetErrorList)
	router.GET("/errors/:id", wrapper.GetError)
	router.GET("/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
