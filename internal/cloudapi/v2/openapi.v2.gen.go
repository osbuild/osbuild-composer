// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/pkg/errors"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for AzureUploadOptionsHyperVGeneration.
const (
	AzureUploadOptionsHyperVGenerationV1 AzureUploadOptionsHyperVGeneration = "V1"

	AzureUploadOptionsHyperVGenerationV2 AzureUploadOptionsHyperVGeneration = "V2"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Choose the VM Image HyperV generation, different features on Azure are available
	// depending on the HyperV generation.
	HyperVGeneration *AzureUploadOptionsHyperVGeneration `json:"hyper_v_generation,omitempty"`

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// Choose the VM Image HyperV generation, different features on Azure are available
// depending on the HyperV generation.
type AzureUploadOptionsHyperVGeneration string

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	Cacerts *CACertsCustomization `json:"cacerts,omitempty"`

	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CACertsCustomization defines model for CACertsCustomization.
type CACertsCustomization struct {
	PemCerts []string `json:"pem_certs"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeList defines model for ComposeList.
type ComposeList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []ComposeStatus `json:"items"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Cacerts    *CACertsCustomization `json:"cacerts,omitempty"`
	Containers *[]Container          `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// DepsolveRequest defines model for DepsolveRequest.
type DepsolveRequest struct {
	Architecture string        `json:"architecture"`
	Blueprint    Blueprint     `json:"blueprint"`
	Distribution string        `json:"distribution"`
	Repositories *[]Repository `json:"repositories,omitempty"`
}

// DepsolveResponse defines model for DepsolveResponse.
type DepsolveResponse struct {
	// Package list including NEVRA
	Packages []PackageMetadata `json:"packages"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// DistributionList defines model for DistributionList.
type DistributionList struct {
	// Distribution name
	Map *DistributionList_Map `json:"map,omitempty"`
}

// Distribution name
type DistributionList_Map struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions map[string]interface{}

// LocalUploadStatus defines model for LocalUploadStatus.
type LocalUploadStatus struct {
	ArtifactPath string `json:"artifact_path"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageDetails defines model for PackageDetails.
type PackageDetails struct {
	Arch        string  `json:"arch"`
	Buildtime   *string `json:"buildtime,omitempty"`
	Description *string `json:"description,omitempty"`
	Epoch       *string `json:"epoch,omitempty"`
	License     *string `json:"license,omitempty"`
	Name        string  `json:"name"`
	Release     string  `json:"release"`
	Summary     *string `json:"summary,omitempty"`
	Url         *string `json:"url,omitempty"`
	Version     string  `json:"version"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch string `json:"arch"`

	// Optional package checksum using ALGO:HASH form
	Checksum  *string `json:"checksum,omitempty"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    *string `json:"sigmd5,omitempty"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// SearchPackagesRequest defines model for SearchPackagesRequest.
type SearchPackagesRequest struct {
	Architecture string `json:"architecture"`
	Distribution string `json:"distribution"`

	// Array of package names to search for. Supports * wildcards for
	// names, but not for versions.
	Packages     []string      `json:"packages"`
	Repositories *[]Repository `json:"repositories,omitempty"`
}

// SearchPackagesResponse defines model for SearchPackagesResponse.
type SearchPackagesResponse struct {
	// Detailed package information from DNF
	Packages []PackageDetails `json:"packages"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// PostDepsolveBlueprintJSONBody defines parameters for PostDepsolveBlueprint.
type PostDepsolveBlueprintJSONBody DepsolveRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostSearchPackagesJSONBody defines parameters for PostSearchPackages.
type PostSearchPackagesJSONBody SearchPackagesRequest

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// PostDepsolveBlueprintJSONRequestBody defines body for PostDepsolveBlueprint for application/json ContentType.
type PostDepsolveBlueprintJSONRequestBody PostDepsolveBlueprintJSONBody

// PostSearchPackagesJSONRequestBody defines body for PostSearchPackages for application/json ContentType.
type PostSearchPackagesJSONRequestBody PostSearchPackagesJSONBody

// Getter for additional properties for DistributionList_Map. Returns the specified
// element and whether it was found
func (a DistributionList_Map) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DistributionList_Map
func (a *DistributionList_Map) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DistributionList_Map to handle AdditionalProperties
func (a *DistributionList_Map) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DistributionList_Map to handle AdditionalProperties
func (a DistributionList_Map) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The list of composes
	// (GET /composes/)
	GetComposeList(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Depsolve one or more blueprints
	// (POST /depsolve/blueprint)
	PostDepsolveBlueprint(ctx echo.Context) error
	// Get all of the supported distribution repository details
	// (GET /distributions)
	GetDistributionList(ctx echo.Context) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
	// Search for detailed information on a list of package names
	// (POST /search/packages)
	PostSearchPackages(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeList converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeList(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// PostDepsolveBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) PostDepsolveBlueprint(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDepsolveBlueprint(ctx)
	return err
}

// GetDistributionList converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributionList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributionList(ctx)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// PostSearchPackages converts echo context to params.
func (w *ServerInterfaceWrapper) PostSearchPackages(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSearchPackages(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/", wrapper.GetComposeList)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.POST(baseURL+"/depsolve/blueprint", wrapper.PostDepsolveBlueprint)
	router.GET(baseURL+"/distributions", wrapper.GetDistributionList)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)
	router.POST(baseURL+"/search/packages", wrapper.PostSearchPackages)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0o+Hmjf8w2nWjfP12/8PAAD//8sZBmaa4QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
