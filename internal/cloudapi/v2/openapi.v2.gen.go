// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name   *string `json:"name,omitempty"`
	Source string  `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers  *[]Container  `json:"containers,omitempty"`
	Directories *[]Directory  `json:"directories,omitempty"`
	Files       *[]File       `json:"files,omitempty"`
	Filesystem  *[]Filesystem `json:"filesystem,omitempty"`
	Packages    *[]string     `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TI1nOuWsI54bN5O754On+Wlj4DL9ocmm55OLWfnCHfSay5G15LdN3rLOSmNSvPSW5QfYbxXNcrd2o/X1",
	"i4L2OqXFhqaxaevRw8sHhmvYO+o/uo3XUcEYvl05XO+apFF4fe6NCW7cerbh1eveq/VQWIjyRBAszAF/",
	"nVrLvjd9uqs+T6rWTJw2rN5d4fGxXi2/Wpe13qI5aN42W2MiTk7Pnh8Gc83pmL2Tfqk3bDaenfvZpHJh",
	"XY76pcvH1go+lCyN2M3wvXZ+MYfO/VRv1+ZjojnaAb69uG61+q12s1k9xZ0OOj90mHV6Xvfu+e1lv18u",
	"PtW0Z4ssnxqnTUfJUPts0ThtL2bdMWktument/Si3eTtVuup3Vx02udmp31abTbb5ux23fvg6qlZqLee",
	"XNNeDZvPT+fWdNWzxqRwYBy+3Rj388l5udh5rcy69evT1lWRXD4etO5KjjcfHryOvGHl4ZK1Kk7lzLOF",
	"2xt0LnqXwql1TsakxM7eHpt0VFq5R0/dxmXzRO+329eraXPK6cNdo/5057UPChMyZSM0KF8OrtvG6qZd",
	"P3w4atTw9f2YOLXhwYTfnizq7fIls/Vmv9o/8ejquTTE4gw+V3u3l/fiYNSBpSrmT8Oz9vSN1m+eGveV",
	"i+tZrTgm5uuD2ShfFSZOufM2rI8alYfOyaRkz6fVrj1fmt3XHjJLpbfHp6XDnobPFxdtY/5mHNhXw0Nv",
	"aZ6PyXRZuCiu7OfyJZ6cscOzZnN1fXT3wJrPw8WwX+xo01Fj0WmT5Wx44q1enYfF/fyq9eh1uveNa1R5",
	"GpM+visZF1cNrtdPXH66rPUPHnXSJ7fDg3M2Hd30TirOA7ObOumMLP3pvjF9nrkP1smKVwpHR+h6TKxZ",
	"kV2SVXF6tZhBzyjgu8a1dvg478+ml4P+hVm7O7rvrS68hwfxtngk0/5V7WFw2nrtVfkzdfr9MTHEZHRe",
	"OqitJoOHQrMyb03gcvBQFvW7t6up9oZmw+cOhpdXR5eFc+2i3R2Ubk8bh43yid60O6dH+pjMyuYtfhre",
	"NiG8KF5cNN/O54PZ4OLy0uyVn26f8PnV/aosKherU4Mz6NQWw/bDtWHdoO7qsjV6vhiTOXOv7JsJMvjo",
	"qFYfGeXWVdcz355Zu3a/PBn2Zs/mwCrdn82H3VvSXr3NbleHnbvy642LH2pHUkdZN93HZ9ajWq/Suxwe",
	"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",
	"RcN8BOf7j/8fAAD//7bHu/mLdQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
