// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulp UploadTypes = "pulp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`
	Files              *[]File             `json:"files,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap           *OpenSCAP           `json:"openscap,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"X/f6/XLxsWY82eTtsXHcdJUMtU/mjeP2fNodkda8e3J8Tc/aTd5utR7bzXmnfWp12sfVZrNtTa+Xvfcu",
	"HpuFeuvRs5zFoPn0eGq/LM7tESnsTfbfryZ3s/Fpudh5rUy79cvj1kWR9B72Wrcl158N9l6H/qBy32Ot",
	"ils58R3hnd90zs57wq11jkakxE7eH5p0WFp4B4/dRq95ZPbb7cvFS/OF0/vbRv3x1m/vFcbkhQ3RTbl3",
	"c9meLK7a9f37g0YNX96NiFsb7I359dG83i73mGM2+9X+kU8XT6UBFifwqXp+3bsTe8MOLFUxfxyctF/e",
	"af3qsXFXObuc1oojYr3eW43yRWHsljvvg/qwUbnvHI1Lzuyl2nVmb1b39RxZpdL7w+Obyx4HT2dn7cns",
	"fbLnXAz2/TfrdERe3gpnxYXzVO7h8QnbP2k2F5cHt/es+TSYD/rFjvEybMw7bfI2HRz5i1f3fn43u2g9",
	"+J3uXeMSVR5HpI9vS5OziwY360ceP36r9fceTNIn14O9U/YyvDo/qrj3zGmapDO0zce7xsvT1Lu3jxa8",
	"Ujg4QJcjYk+LrEcWxZeL+RT6kwK+bVwa+w+z/vSld9M/s2q3B3fnizP//l68zx/IS/+idn9z3Ho9r/In",
	"6vb7IzIR4+Fpaa+2GN/cF5qVWWsM327uy6J++37xYryj6eCpg2Hv4qBXODXO2t2b0vVxY79RPjKbTuf4",
	"wByRadm6xo+D6yaEZ8Wzs+b76exmenPW61nn5cfrR3x6cbcoi8rZ4njCGXRr80H7/nJiX6HuotcaPp2N",
	"yIx5F87VGE348KBWH07KrYuub70/sXbt7u1ocD59sm7s0t3JbNC9Ju3F+/R6sd+5Lb9eefi+diB1lH3V",
	"fXhi59Q4r5z3BgcF/H52PbxxxEu/+fuI/H41GdZHRFmXzsXRR6Yndf9K1Yo/c+6kG+lfZ47SDt2rQvzU",
	"YiPpuAeNgK7WVwmTmG8CuXQrOFDOd6wmQR0CGJHfPOwhBxP0NfVAwNqudHjUkn7ytMXPzZEk0yBgQxYk",
	"PY245qEPVirhV+JUQ+CZrnwNnLjkTXnIYEjk5KvYcnqQ8zllqYcGpE/7nOocr/vGO7AIJhxb9srNgJsq",
	"OSmzIAnOp6xunlSLlXI1Pb21w411Ok6FDpg40Aqrz5htyD/DjTmdS1bFgWHBGHQ4BdCZwwUPcsscdIMZ",
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
