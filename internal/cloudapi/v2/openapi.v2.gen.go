// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for AzureUploadOptionsHyperVGeneration.
const (
	AzureUploadOptionsHyperVGenerationV1 AzureUploadOptionsHyperVGeneration = "V1"

	AzureUploadOptionsHyperVGenerationV2 AzureUploadOptionsHyperVGeneration = "V2"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Choose the VM Image HyperV generation, different features on Azure are available
	// depending on the HyperV generation.
	HyperVGeneration *AzureUploadOptionsHyperVGeneration `json:"hyper_v_generation,omitempty"`

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// Choose the VM Image HyperV generation, different features on Azure are available
// depending on the HyperV generation.
type AzureUploadOptionsHyperVGeneration string

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	Cacerts *CACertsCustomization `json:"cacerts,omitempty"`

	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CACertsCustomization defines model for CACertsCustomization.
type CACertsCustomization struct {
	PemCerts []string `json:"pem_certs"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Cacerts    *CACertsCustomization `json:"cacerts,omitempty"`
	Containers *[]Container          `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// DepsolveRequest defines model for DepsolveRequest.
type DepsolveRequest struct {
	Architecture string        `json:"architecture"`
	Blueprint    Blueprint     `json:"blueprint"`
	Distribution string        `json:"distribution"`
	Repositories *[]Repository `json:"repositories,omitempty"`
}

// DepsolveResponse defines model for DepsolveResponse.
type DepsolveResponse struct {
	// Package list including NEVRA
	Packages []PackageMetadata `json:"packages"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions map[string]interface{}

// LocalUploadStatus defines model for LocalUploadStatus.
type LocalUploadStatus struct {
	ArtifactPath string `json:"artifact_path"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageDetails defines model for PackageDetails.
type PackageDetails struct {
	Arch        string  `json:"arch"`
	Buildtime   *string `json:"buildtime,omitempty"`
	Description *string `json:"description,omitempty"`
	Epoch       *string `json:"epoch,omitempty"`
	License     *string `json:"license,omitempty"`
	Name        string  `json:"name"`
	Release     string  `json:"release"`
	Summary     *string `json:"summary,omitempty"`
	Url         *string `json:"url,omitempty"`
	Version     string  `json:"version"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch string `json:"arch"`

	// Optional package checksum using ALGO:HASH form
	Checksum  *string `json:"checksum,omitempty"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    *string `json:"sigmd5,omitempty"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// SearchPackagesRequest defines model for SearchPackagesRequest.
type SearchPackagesRequest struct {
	Architecture string `json:"architecture"`
	Distribution string `json:"distribution"`

	// Array of package names to search for. Supports * wildcards for
	// names, but not for versions.
	Packages     []string      `json:"packages"`
	Repositories *[]Repository `json:"repositories,omitempty"`
}

// SearchPackagesResponse defines model for SearchPackagesResponse.
type SearchPackagesResponse struct {
	// Detailed package information from DNF
	Packages []PackageDetails `json:"packages"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// PostDepsolveBlueprintJSONBody defines parameters for PostDepsolveBlueprint.
type PostDepsolveBlueprintJSONBody DepsolveRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostSearchPackagesJSONBody defines parameters for PostSearchPackages.
type PostSearchPackagesJSONBody SearchPackagesRequest

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// PostDepsolveBlueprintJSONRequestBody defines body for PostDepsolveBlueprint for application/json ContentType.
type PostDepsolveBlueprintJSONRequestBody PostDepsolveBlueprintJSONBody

// PostSearchPackagesJSONRequestBody defines body for PostSearchPackages for application/json ContentType.
type PostSearchPackagesJSONRequestBody PostSearchPackagesJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Depsolve one or more blueprints
	// (POST /depsolve/blueprint)
	PostDepsolveBlueprint(ctx echo.Context) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
	// Search for detailed information on a list of package names
	// (POST /search/packages)
	PostSearchPackages(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// PostDepsolveBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) PostDepsolveBlueprint(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDepsolveBlueprint(ctx)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// PostSearchPackages converts echo context to params.
func (w *ServerInterfaceWrapper) PostSearchPackages(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSearchPackages(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.POST(baseURL+"/depsolve/blueprint", wrapper.PostDepsolveBlueprint)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)
	router.POST(baseURL+"/search/packages", wrapper.PostSearchPackages)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"z7xOHU2zbpzPX/9/AAAA//8DQH51CtoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
