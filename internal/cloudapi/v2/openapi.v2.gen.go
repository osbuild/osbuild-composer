// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string `json:"installation_device,omitempty"`
	Kernel             *Kernel `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *Services     `json:"services,omitempty"`

	// List of ssh keys
	Sshkey       *[]SSHKey     `json:"sshkey,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiunPubKeyHash         *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure     *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts    *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl *string `json:"manufacturing_server_url,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *struct {
		// List of services to disable
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e3PiONY4/FVUPG9VuivcLwlJ1dQ+hJCEBHKDXJeurLCFrWBLjiRDyFR/97ck2cYG",
	"E6C7Z/bZ/fX8MR1s6ejoSOfoXOU/MwZ1PUoQETxz+GfGgwy6SCAW/LKQ/NdE3GDYE5iSzGHmGloIYGKi",
	"90w2g96h6zko0XwCHR9lDjOlzPfv2QyWfd58xGaZbIZAV75RLbMZbtjIhbKLmHnyORcME0t14/gjZexL",
	"3x0iBugIYIFcDjABCBo2CADGsQkBRNgUiyvxUW0/w+d7+FKBbjz0Ws1y06EENSX5uBoImiaWaELnmlEP",
	"MYElIiPocJTNeLFHf2YYstR8lgbKZrgNGXqZYmG/QMOgfrAwwcwyh//MlMqVam1vv35QLJUz37IZRYlU",
	"WMEDyBicqbkz9OZjhkwJJsDhW9SMDl+RIWQ/Pb87z6HQvFKk5z88wQjxDPJzU8RFrpTJ/p3TzmY4gR63",
	"qXjRqx3HyZ3lwrfLWKUTLB3XdWTsCSh8zSUJQkEXJzGCLs4VjXqluH9Q2d+v1Q5qZnWYRrEtSbwwGTlu",
	"ds0e6FV+Zgt4/tDBhmbhEfQdEbVLsnR7BDgSQFCgXoMvwkYg6AIU837NAggcSqwsoMORzw0okAnubjsD",
	"gjlgSPiMIDMP2oID9O5hBiVo4GLLFmCIAKeUIAaEDQkYUQaosBEDvprbgAjILCR4fkAGZI6LYD6Sw3Kb",
	"MoGYHA3EBgOQmAOCkwNiDiTuHLoIQK6Gkr/jw4H5aPMlGlLqIEh+flE3W85VW9FnTroojg8hG6XC//AZ",
	"+pntgl1ooYhDF6S+pCgdKWpqOiITqA5y0YHrc7XOPsFvvjyaVEMLTxABDHHqMwMBi1Hfy6slloPIxaIu",
	"FnInjRh1VRc5UcSFXHcGiUldQAkCQ8iRCSgBENzdtY8B5gNiIYKY3IZ6IRMCRSGWxrEONaAIljc5wU7w",
	"Jpykx+gEy0mG6L8o9LNgaiOGVBM1ityevmOqyYd0gUR2szAXiCn8zuhU7mgHcwGg44AQDX44ILYQHj8s",
	"FExq8LyLDUY5HYm8Qd0CIjmfFwwHF6Bc20Ig6v4xwWj6h3qUMxycc6BAXPwP/Ahl4Ysc6CUaZEeRXGIc",
	"PpKkJ1QA7iEDjzAyswAL+dBEpm8kFmQFHRaJLtkD+XI7pQvKeN/Pd1dyu2xA7kVU+tQ3ILkNwJyqEdOO",
	"O38YofCCzWWk2scSpXizH0CmimpmfVg2cnBYruaq1VIld1A0arm9UrlS3EP14gEqp2EnEIFEfIKXREI3",
	"2gyrYAuOMDHVWmsOVTIDXFMmoLPJXgz3ocATlDMxQ4agbFYY+cSELiICOnzpbc6m05ygOTl0TqO8QKSa",
	"sY9GteFermRURrmqCYs5uFcu54rD4l6xXDkw9839tZJ3TrHltV3agWvk5yr5nJSQm4icBSRjANJQiOuz",
	"R9ScyVEoQVejzOE//8z8fwyNMoeZ/ynMDYZCoBIXUvTh798WIN4i7lESaMqOswHUK4XZLRohhoiBMt+z",
	"SxQxk5QolStI6og5VD8Y5kpls5KD1dperlre26vVqtVisVjMZDMjylwoMocZ31fLs4ZqZgq1otnNF+vH",
	"J/VZ+8SW0MNqerbN/yJK6il1qMV/6aTUfh/62DH17wWLIUAhm3nPWTQXPMREIDaCBvrze5otMaavSmH/",
	"DLML+orVXNIZMEDoU1J0IcEjxMUvpYcbB/rzxFiY3Bz65zNDAppQwF85McoFQ+jFoK6LReqZ9cWG3P4a",
	"Hl1yBQQImqecfx40xtDSsBd9H+qNVqYwMRzfxMQCl63720YmZpN+Np8ARkSINMKupt+t1lG31K4Nnwvq",
	"4g8YqeafYdhMtv6ezZhYUmfoiyXrhNnIydXTqKh3O5vj+9mQbdk4nNti5+SG3QbMj7Lv0u5OECC2HL9C",
	"/qdJLR7BXTvd8HDIJrqiLYk2h5JGsw3xkaSbA9qsT4KQ98pZt0j8AFBygp+LGQ2uxRhly5qUiQTEjvxT",
	"Es2MSUEp8CzEtNkAeaqPbvlUixovIaDnIxmG+K6aim8YiMu5jCB2fCa1Ng8RKUXkhOZ8NW+4xFhNSgTE",
	"BKXM7BP7WVDgcxR5JYwQyNzaWmm4au11GW60jZXHJAFUUIDcITITqrY2S9ksHzxSur0a9VBAK9UScfjL",
	"BDE8mi2PLsnAqAP6nR5QbfAIBwZ2bFDlyFnytCxuMD3BVK04nNLPODc+WZZoPRhSbq05CRVhFowVypX2",
	"kEoqaC0P0YfWliNoez5Vl1tHm5gs3Jw0JraC4yGJ+bF6Hp7YoXKx5AWaT4aSwILXeyzuYJsTKfBxJYc6",
	"uTm+THcvLdDmzYezPKYFdxb4OgrBehx+QrVF71k2nHLqblMn7y3yKMfSfF3m8CHkKJhFJNznGIY2tGGS",
	"PEOmDbX9LKmEiCjIU6wgT+x6oV54r++97FULEiDlBcoLCYWe4dRNtnA2GDYyxi+WZ8XkZMydqV8z5NHV",
	"bRCBQweZ6S9H2EEh8ywhY3nWGM3SlNnVCCek/byZiwR0MBmnU9PF8hzh+REyKYMeo3K58pRZhbDfP+Qc",
	"/9Dvc5XywC8Wy3uQGfYfmsobkFYPIhXLZSQiHOTrvIGIoFyN/w+GHAQ5+qOekzowdGMjQ/n/vap+ovA7",
	"ghxd9TbAZSXJPYYpw2KWfmRy7sSk9RqZm2oNhhwQ11S3UXNDabC58jM/TNO2t0JGbWDFjzjNJmi9CwZB",
	"vI0SuaERMfdzAkxAUhHPg76NOBqQRO8pdhzlQOPIlAepiTxOnQkKXLuCYTRBEfw8aEQEcmbZARES5Hz4",
	"EBqHk8A7jF2PMqFhS5n3rwISRmHmu3mFRt4s/AtEDrQBCQTrXCBuRtdFSZZC3nAQvIWyehwilgZwZNJ1",
	"/U+Or0LBsvmgJ9hBqeNJKDMukLsVqKBLKkCGptBx1kPR7RLcomRiuo+7g/XZqV5zufBaG9h0NbUjOwVh",
	"m3KRrt00KRlhy2dIR8WihsloSezxsgFpERwanJ/aL2E7Fd3nAjqOoseLiSbYWBNPincAukMWGD5jiAhn",
	"BihxZpIRR74TKVLItFCOY9dzFFvnAhBS6515izpDwUSTAjdh2gTHiBG0dq0vdKsggOSgde07utX3bIZ6",
	"iHADeut6XHmI9JqN60XfRyz67lEuLIb4dpF3DzKhlgYT68WlJkqEgzPQFzTnTNzMYky4hxxkCGDTqSK4",
	"ifk4CC+E0iyCjMw82AkB7ej30s5hcAp84iDOlURkCECGVDyPMuBShoArNTiPYiJUHsnUxoYNDMgRwGIO",
	"p3PfzYMdBRs6UzjjAyKNa/k8C9AEqbiMkpDBEIQCpE6EGPw82GFwugNUT4lZhD4fkDQgK/AMAjyBLcng",
	"NJPNaPpFpPyW6s+aSa3233KOKQba+DAbkJDJrnoAC46ckUoImGlghKpAL5xA7EitMWJJpYUDRqkAlA0I",
	"JLMg7C4JHXf7mcBjVBrWXxXO4cAvHAkORhg5ZghzaTqYA2wRysI420aC8/MDkCMmBc5aKL2wnVKy7EDr",
	"TRfxnNtgjGZ8Uwx7vbMLlI5dLJC1Fkq8rYSFXfRByVph1Q/bSeOMb6O43fE0nS3NTJ2rDEtEawQbea7v",
	"zM/GMEw5wgQ6QDLsCBpCr31S7USE+wy9eJCFeXSfp7y0VHsgbCh0mFt1BDF1CKB3HLcnYybRihNendDh",
	"Tp/PBnIAg2C2SnugTP7GC34ZqtKf5sG+RQmyrOx/kxZLJNATLnLEXMy5FAtAA4i4dI4WJoAaAqozVVoi",
	"cWyK+7Vaulde2GkeeWGHimwEP3kCS+3WnZmYpXoEuPajJaFeTYlOM0yhpuwRI6b/K4i5YBupqaZZR5FD",
	"81d5m41gDZfokvCRyh4wlquQkmOxmbNUDRc1XwCc7tBVU+4EZvFm01atUzzroVjZSL5oUq+LemlQ6ZhL",
	"U2Od/brgiWofXwVKKKBkSCFTHi6lR4eezUX3mU9ePH/4MkazFxtyO30x460w4cjwGVrfUm7lFwMxka7t",
	"uZD4UiT68sGLPMsQe1mZRba0l5VRtVoiS9vqR4RxGFxcdhbL5Q15WkGHHHgOlJDRe2og8C8U7Gsc1JvJ",
	"+XAWSqQHsj2S9f8WEa8w+lS671WrPybdJeg0wR48/xHJPqefH9Ivku5/n1A/SXgRFmL2mLykp8LLp/F5",
	"aAiS9sOZQDyOfrlU3a/WK3vVejK872Mi9qqKlSMbI+l8LEwgW+vVjnXOzhFOn2ma22JLGRnAWCcZPcoE",
	"X60mq9fgizRwKBOAQWIh/lVZJR6jghrUUX4SaUPHafnPTLl8KAwvk83Ui8Ef2IWe+nO7tPSY8v9D8w8B",
	"qGCb8qLLLWxiLv9MOSl45GhfYTnE4M2hxGYukEOQ2G6WMff++lF14+SgIyFJTIS3Za3DwuZLO4FOm9c/",
	"E9Ub+sYYidXuJUi0tJfysddvXB43bo9BT1AGLQQMB3IOjhSI/GIKcfAjF4ywMrki3fMm7VqSEvKN/L5y",
	"k6siBhM0qev5AoEWsTAJnLz5AelH+ZwK0EKG9RQLOziPT5vXIAiIZAMXCubK2E+a8gpWkAM/90HnQXuU",
	"zAWOUq8HZMfQkXSWgx7ODfxisWL4PjbVX2gnPHmC4aQYFwmst0nNnufdL5NSTlG/jyW7RnMKHVJxp3qM",
	"viNG3YCeqpYhIiWUv7GpoIeZ0XnQQwhEMTyH+mbeotQKIuVcbx2VIFuIEqyDnPZkQrWKmfqOwLkA8yj5",
	"2nAoR1yEh6qOfA/IlyDvOdyeemNG3b5KMhs25YgA6AvqQoEN6DizRSIjf4vqnnSBENBFzRuEzSW+Ckpy",
	"J6dtX7U98wPSgoYdbhJF9SA6BGBEqUgRCIZRDtw8uFcYaOWFA8jQ4YAAkAM7Ujk4/BO5EDvY/L5zCBoE",
	"qF8AmiZDnGvVjyGPIa7UzWgsQ4IAC9PKgxPKQEC9LNiBDjbQ/8ayI3bywciBlGzoflvioIcOQKwa253l",
	"lMssBz3vf6HncY+KvBV0CvvEUVKa5rbUCOYfpvFLvBZIYLqY8FQamNSFmBz+qf+VAyr2BD0fCwT0U/DF",
	"Y9iFbPZ1eXDH0QOqOD9HLDAGoAj6LlJkzno78mDdWcApnes+35ph6YMWDnKjAkhmAxLSd7Cga6gNt7Qr",
	"MpHyEO6HTRcvE9gVh8tkzmQzAYHjD/+S+sLo3P11qe7qbJbwXxZTmSE3EDEhEbkhg9jMVYqVWqmyVqmN",
	"gcuuy5w/DU21LZQHK626Qht30hTRYkkbc3Mj+Av1NPivc/xj8ff11VMLANdSYeWU27HY3BbKa9htje6u",
	"UsdMrTVuEvlrhe11CJWLobTXNux8EnVIVRKXxtg6JWGErU08Y6rdZ7Q+ic9sCxRSk56uGZ1grkNz4O62",
	"s1HuUip28ZTb7RCDzLCxQIYIvFFzpo2yZlYovvrxBmmt/ZmnwyY6R3xtJLTXl63U1JOxsl8R7Yns+MCH",
	"VFyKewY2vZpkNrLl8+DBRiQsTS3Gq61kBywPVhcT7PrugJhohAkywXAWa6f0muThUi0fVA/29ssHe6uc",
	"Alpdf6HeRknjSUtq3j2oeE3XreWYSl0OBlG2ilJcPQct1swCpdHJhQB6knxAIODIg0wKx6C1iaTFpZVd",
	"dcBiwQGdknCIPOgG8AfExCPlGhfhGNKKmCLHkf9GaITvAhmq6nvHmJhSMxwQ7nv6xN8iKqhp1Vdw1x6k",
	"CS5JMMDCLv0WcuOqYxWF0YON87EjJ/jW+ehBJne0DTYDkCx3Wui8BSMuwvmUwGE+eZJ8W6VuZzMquKz/",
	"1Ejrv8NK3CC/e0mcxYRUbCg4lcPAKc/ZMMdsHwe/Yn9y6EU/PzQyuigXQW8/8Sb5I9ZP5bFEVTDBrzAb",
	"LngQ5bZIzVE5uywjAmBJmR9pZOrfRAdMxRy+/jEHL38vNmZwGoFz8CQJjRpyzAn3pBE+/ytHJzCTzUy5",
	"k0rgiyjHZpuDyZMLmxKcUM+lSWj5LgrMUpVaQKlQicMM6KQeVV0kBZuDSdKVTCh3xR8jygz0Werlah0u",
	"GEA7dxKg9ZuciYa+tVkG90VQD/MDuezzYU902mvTob6ZO4J8hYdFJaome5aL5WLxoLifL6Z6DVREKT0l",
	"d0xfcUo+rnxs+8NNMpkhHy/aCtVymlY9QYwvlT1V1t/GEKA/HypY3DnEOVW+rVibsCRy0TySJ05QvkJU",
	"ydtSXJJoptMtV4FfdVAoYbYJddL2VBirTYKUB2Z6SnFwa1BKOnGgLy2/EVRAJ+3VAhXUoNnouiF9y4/u",
	"nF0Zus2q6xicn/EMq0S9Fw4naH3MsG9jHjkxsbSM3GFCf9HuxqO7duf4pXPVbHR6jfsWQGSCGSW67n1A",
	"JpBhHQHQflm9+WKRAQ4nUtPXVTrqhFfOPceZ5YFEQd2lIrUvE02QQz0JWHmPKXFmWe2z1c6LefaVFkFs",
	"xW0mC2sRo8lKmqMtzUndaY0xOUYzFUlflqo9qdVpkaqbAAfOqJ8MWPqpNVgOJJafXiMa+jF1tqY6IoZR",
	"nmnoJlJWqr5eBBnURRwEfqusuvRBmlNEvVf+R8CRQYkJg7KWmIMIkZe7Xv6uf5Kr/1x8JJu5ara32/Or",
	"IfwlV8wEttnhnylJ/4iIVCu3oS7uUXGJLMDqdp9sxGxyt4+QMGzJGAGUPGi7noNR4Lv8l8+cf8kO0vYK",
	"bIPsgOhARyJPXxkuQUmv4pl8egWSTglISVCARMJCWKUtwqA6GXwJ1voQFMt7xeqwbMI9dFCrDs1KdVgf",
	"1suwXqmhGtzfN8vDveJoBL9mdSB7yCAx7JyDxwiwqFBvDo/ZyJlXAUll7+uCL3+5RfrBPlquCN6gm83d",
	"9cLxGAnEXGnqgamNAtLoAEHibhQXEmghBr4YkJgO8jD5CrCJiMBipu9t0vsLCKqcrdo5rV6EFnseNCnh",
	"vosYMOTmUsWEi9UYkAPDwZI1k21sRAYk2kvRPpBSM9xYK2582jxfZjGZa4kR7GApln0m6SfviiM5rb41",
	"OEjVCKm8GWaQLyHlMTrCDlqVOCYgdqj6sWGOej/qkOKxDUf6DMV+fMQkrlylnWsX3+YRbp/8SL+0FV68",
	"GWD5tjhmpCd4IY+ueLOylCumkC9r3thyzdqqVwSKVeljoV9u6UVMiV5zk452bKzUlLOaCBGO0mpP1ksu",
	"1iiH75JqQn5AGgJImPoYDoyrnaC+cicLduYld+pXUOq3A+ZrouKKAzJE8yiQCmmrvH0N0dXndzJIRJmp",
	"Y48eQwYylWTGulAhuj5OjislzpBOUFqeW6wQ9O+r/9y63nNdvpzUIzmwPCso4U7egzaXzpFMXSFG57Wg",
	"CxGV61Op3UXlB3L7zksaVBJD8hRInIA5+d9R67R9Ca5Pr8H13VGn3QQXrSdw1LlqXqjXAzIg7k378ui0",
	"YfQMetRqHHdG9aezMfo434Om032a7sPT07ZzDh1RP38tvxeOyhe7dnvU9t9PhXf/uo8GpHNrHd/t773C",
	"fs27P665J93zijdGBN0WjL779nYzvpzdcPuxTG8ep62Pu96w1LzsNkfNU2v8WL8pD8jH85i1jSY7Kd6U",
	"p+xi6EDftO928T0kjWPulupPrTc+rDXuKvumuGPdys2T+WAd3O4+4uvRff12QC6OXvvFyuT+6Mrs9vhT",
	"5aADm2Sv7ZWuJl693aKFNmrdP5Xe3ObVdQNeFIfnZxV/ZFWbPhrz3X5vQKY3D33U7Lz7z529q+4jvbq+",
	"mE66N6P3oVV6PK5P/OfihXgtGJdn5XfoF99d3vAPzs49NJ5cXd++OwMyexOvs+cRo/cYncy86bM1uZkK",
	"Qrr1gtVr+YXz+z57KtbKbuuuv980hvvVsXF20j8ZdccOGZ8WBqQ4uqs2bmGtWD2rvL8Wx2KIKpML4/qR",
	"Xl/5F0f3/Kw3KRbvTp8as2vkz3br+8Zd4alld/fHld79xeuA7KH2szXD3avi1Ck9nR7fXhi+Mx3zg8au",
	"74ytEu0Pq7zy4T5Prov7p7T//lAtv8KL2kNv99J+RmhA6nvFR3pvD43ShdfbfR0901fOWuK5fj28e959",
	"mpzUbz1mPjTY69nwfFw+924vGu99+53fNPiRfVoakGLHfy8/wO5R0Sq3a9dG1zwvGG+vtFg3DPZ69Ojj",
	"9weGa9g/6D569bd+YdT7uHS52bZIvfD2fDEguH7jOyN/f99/sx8KU1EeCoKFdcvfXu33rv/6dFd9Hlbt",
	"sTip2xd3hcfH/Wr5ze7ULqaN28ZN42hAxPHJ6fPD7cRwW9bFcbd00WvUn9378bBybnf63VLn8WgGH0q2",
	"QZxG+Nw4O59A9/7VbNYmA2K4xi6+Ob86OuoeNRuN6glutdDZnsvsk7N9/57fdLrdcvGpZjzb5P2pftJw",
	"FQ81T6f1k+Z03B6Qo2n79OSGnjcbvHl09NRsTFvNM6vVPKk2Gk1rfDPvvXv51CjsHz15ljPrNZ6fzuzX",
	"2YU9IIXd0d7H9eh+MjwrF1tvlXF7/+rk6LJIOo+7R3cl15/0dt/6fq/y0GFHFbdy6jvCu7htnV90hFtr",
	"HQ9IiZ1+PDZovzTzDp7a9U7j2Ow2m1ez18Yrpw939f2nO7+5WxiSV9ZHt+XO7VVzNLtu7u89HNRr+Op+",
	"QNxab3fIb46n+81yhzlmo1vtHvt09lzqYXEKn6sXN517sdtvwVIV86feafP1g+5fP9XvK+dX41pxQKy3",
	"B6teviwM3XLro7ffr1ceWsfDkjN5rbadybvVfrtAVqn08fj07rKn3vP5eXM0+RjtOpe9Pf/dOhuQ1/fC",
	"eXHmPJc7eHjK9k4bjdnVwd0Dazz3pr1usWW89uvTVpO8j3vH/uzNfZjeTy6PHv1W+75+hSpPA9LFd6XR",
	"+WWdm/vHHj95r3V3H03SJTe93TP22r++OK64D8xpmKTVt82n+/rr89h7sI9nvFI4OEBXA2KPi6xDZsXX",
	"y+kY+qMCvqtfGXuPk+74tXPbPbdqdwf3F7Nz/+FBfEwfyWv3svZwe3L0dlHlz9TtdgdkJIb9s9JubTa8",
	"fSg0KpOjIXy/fSiL/buPy1fjA417zy0MO5cHncKZcd5s35ZuTup79fKx2XBaJwfmgIzL1g1+6t00IDwv",
	"np83Ps4mt+Pb807Huig/3Tzhs8v7WVlUzmcnI86gW5v2mg9XI/satWedo/7z+YBMmHfpXA/RiPcPavv9",
	"Ufnosu1bH8+sWbt/P+5djJ+tW7t0fzrptW9Ic/Yxvpntte7Kb9cefqgdSBllX7cfn9kFNS4qF53eQQF/",
	"nN/0bx3x2m38MSB/XI/6+wOiTpfW5fFnR8+KslnK0AvnTvoh/fuug7TLvlQFYKrjXVp0QSOgywSVfR3T",
	"TSCXagUHWMVn5ylfqvpwQL542EMOJuhraiXiUtJPeMUL3bLa9tea1EmrGawwmtP9fkuWTVBkuJ0XNVWh",
	"a5hm5LMLoy8+R2yHA+gLmzL8gcyXMZrx5YIBzu0cMsu1WukANBqNRrNy+QGbJef5uF267Ldq8lm70XvA",
	"Ynx1Vr2r71dbJj+6IzMxrAynk1vLOnNunOHTo7NPSsXJwYo7ZlLrDu64dseGRohOZAyKNeWWSmCq0rPW",
	"p2RwFV+QdEqzeHubJpj/gkRxMJyFl3bHg+DzGYU3G5jp8oC0dZfSL8kgX4sNGQlleWyJTOrWXqiSXbDY",
	"DYEnusIt2M7Jy+eRwZDIyVcxSeVBzqeUpZJKmmsvqXbfstm3gfTDhGPLXrhsf1VJEmUWJLGqjXggr1qs",
	"lKvpjr4NLoG/CvLawMiBVpi3zmxD/hmG0DXDqCqXMNUcOpwGZfnBynPQDma0IFZXzSlZtha/f22+rHkp",
	"WWOEXUvXBT5N0C27uCcSOMQWOLY4adzdj1VYbxEyCbutCZoQ4WmsPglwEOGBsFHiACvmCWXCzkEXMWzA",
	"vEepkyfCk8d4JpspffZ6qxMvXmW+OmAetsqGMkFJirt+MyFy73qFFpT7jGwWOl+OlZDZxnclLyZLre2z",
	"+C2GdV2WSlvWjrF8gf+6LiuuxlvXLSW6uq7LUmjq+7d0CRIqZ/ry/+WMMFWKgXl4SzlD0NHXU6jKPjD0",
	"BVgmtk6wU2E5ue8HJGUNdRAVuAiSIHQEHQekNAR6B/EBgQxpAaaVr6VxYdQ2kHYTTNU9c9qFKBEeEOY7",
	"SF+/wdCIMpQFUwRsOImKf9SuBKpuRc5uiACcwrBGVd27T3bEgHiUcxzEdF38riIXLhSGrX2ZwUIAQS2l",
	"MkrhGvHAqmhfLHFwm3vEF3K3NmaNDXssJp9vwRgb9ki/FnHjPR6/7Hv7rLko726TFNkgD1HnyK66dDXw",
	"yIer+W1h3bfMk2M+IauS4RJpkUvbaesJ/WQGa3pgYgHkt5Unw+qkvjyvRNl0Ye5ePDOOGjgfcL6uxkon",
	"VmBmbFNzoG7/WnF1pHpZ2uTSxyVFdiO76pKdXrRY9wnvdrt3U/8M3jbO3dsObX/cjspvx2XzuPZRPOq/",
	"F/beP8uLiydmIFb60QoGpfkZPsNi1pPLrwl0hCDTVB2qv05CLe/8oR9+H0zpj7pdBFWq3/orYZiMaFqi",
	"iS69EjQw/VU6jc4I0RnaPK9SHg0UfCIh+DBZw4OGjUBZJcgpHTVy1Eyn0zxUr5V3JOjLC512s3XZa+XK",
	"+WLeFq6j9SShSHbVO1LDBzm+DKgaQwA9HIu1HWbK4eVh8sVhppIv5ksZXaKvyFQwHEoQL/yJze9qX6VV",
	"wZ4ifQeCliOqHhYEzA8oU0lIDhLhTav6FmIY5iaF57S+Yj3mqqBM5SDNM9tVIQumBCixg0xk5uP3irRN",
	"jUr8Yw3ZxGfu/pn+iZMgv14jLyiwVB2u+nicKuSPvh0X3P8c7jhtZ8y/JPfLv6nwTX1PRH1LQy1GuViM",
	"ZcEE2atOEEgrvAbXsswR+vTkilFJbeckZeI0kVuk+guHDjLNlwdtE60fhVlr2NRDl/76oRu+un1ijJQ3",
	"DGtE9OiVv370OzJ3aMkd6CEm9waI9rbGpPp3YDImdEoWlqD2d6z+HUHvnkquAKp6AVBDXc5oJkS44uJQ",
	"eP/zm+QR7rsuZLOgziQuhJTwivaTglMw5p9x9GjaddRNXYAHAUHTsGsWeFROHSsjwqCEB8X+yic1QQyG",
	"wl3J+8AaUd+r1I5LzOK2CV8WXNeUi/CLOlrIIC7Cb/P8Go5PflXie/L4lMLs+5K8Kf3q0dtm2tIHL4EN",
	"uVw/JpD5bxM6bP5Jid+S57fk2VDyBEIjTdL8KuVpC30ppOEaRSnxXZONVKUI8P9jylKCUik7KEmX3wrT",
	"b7H1H6owrZRf2hCMa00p+kv8s4AbyZOYsPo/JEX+At1r8YOLf7f2lfZ5xpQtpe6TQtP5FSZDpCom9Pdk",
	"0uWaQO+ioC5XTOKT8mH1zaRX9VcNkMab3xOntiRL4vKuTxjACQr0fuQUH2GCuR07xMGnZzgW86NbF2Sp",
	"6IGLBASY6D2MKQFwSH0Rfs3Wd8Rnx7yqL/x9yK895IPPOaayhtwC0R1rOvAUGYiYAEL1be+G70AWXCoF",
	"vgib+pYdhH7Oe1eXX/P/dYx0qi4Qs8KYXLjL09go8WnKT3kparkBO92qr7Vzld8ffUFKIqNs8ECckfin",
	"v4M7JqLGBlWMFdV5B8sX3rEBBYi7Y4OvQelsOUjCr0PlQnD52iesOP/k529+XMuPc2KtYMrEci8x5n8n",
	"ryXZYwOmi9UZfc5zUV2jZLklPtPXG6J3aIjEQcQU+yETmEhfm0ATvBa5/tXlNJ9xRojnb8ZYzxjRV2VX",
	"8EW4lNvwxW8j9beR+n/NSF2STWnyTgGP6xRLImb+dYEl4ZI2s3mTgrpUYlVSR6ydunXiL2X9+RzSdrv+",
	"VjUdgYAYv9ns38NmeqP/5zEZjDYQdBwQ5YmFu2nOZus92pDopAdiRLmZGrP59c/DGVBHZzqjbu4/QkHz",
	"nzr1K3/zGb5yKdULEH/2m4t/c/E2XIyWd5Dk3CjJZ/UJeRU0+cl9v5h/tTTRABUlC6RVLkGEHxD5D9RL",
	"Pp3O96jwIE2KdYN7rKnpG/ry9egqsWQKGPRwXn3j0cYjXfEBPaw/qJ5TngfEcuEl+oVJWWkrC4lpAlqY",
	"WJ8NwAW00E8OE3xPM7hnOxpmHZxv3///AAAA///SBzKCoJQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
