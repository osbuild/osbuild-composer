// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name   *string `json:"name,omitempty"`
	Source string  `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container  `json:"containers,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`
	Packages   *[]string     `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9+XPiuPL4v6Lifatmp8J9BJKqrfeAkIQrB5BzmUoJW7YFtuRIMke25n//lmQbDHYC",
	"2Z3dd3zm/bATbKu71epL3S2931MadVxKEBE8dfp7yoUMOkggFvwykfxXR1xj2BWYktRp6gaaCGCio2Uq",
	"nUJL6Lg22vp8Dm0PpU5ThdT37+kUlmNePcRWqXSKQEe+UV+mU1yzkAPlELFy5XMuGCamGsbxWwLuK8+Z",
	"IAaoAbBADgeYAAQ1CwQAo9SEANbU5PPv0qO+/Yie7+FLBbr+MGw1i02bEtSU7OMKkcuoi5jAPnqGTEVy",
	"DFY6xS3I0MsCC+sFahr1At4HxKdOf0sViqVy5bhaO8kXiqlv6ZSabCKs4AFkDK7U9Bh69TBDugQT0PBt",
	"/RmdTJEm5Dh/CneuTaF+rbjLP5rDmrYU8jILxEWmkEr/nTNLpziBLreoePHXLEqTs8qEb+NUJfMkmdZ9",
	"nBoKKLwERkEHb1MEHZzJa7VSvnpSqlYrlZOKXp4kceyTLN6ZjMSb3rPMw9KeVXa9iY01X9cM6NkidWpA",
	"m6P0ju61DcCRAIIC9Rr8IiwEgiFAadnXNIDApsRMAzoxPK5BgXRwN+iNCeaAIeExgvQsaAsO0NLFDErQ",
	"wMGmJcAEAU4pQQwICxJgUAaosBADniJ/TARkJhI8OyZjsqFFMA9JtNyiTCAmsYEIMgCJPiZ4GyHmQNLO",
	"oYMA5AqV/B1FBzbYNqswodRGkPz5dTtsxd6TNo/ZyTYzikJ+lAj/zWNoj0RgB5porWc7FlgyjRqKYT6r",
	"kA7UALmuwPG4WkqP4FdPugn1oYnniACGOPWYhoDJqOdm1SpKJHI9qIOFFBaDUUcNkXNBXMilZZDo1AGU",
	"IDCBHOmAEgDB3V37DGA+JiYiiElJ89dqyywowpL0zqYaFMEKbk+wF7wBCwsxpGhRUKSEebauJhfOGxId",
	"yLXkAjGF/5IupFDamAsAbRuEaPjpmFhCuPw0l9OpxrMO1hjl1BBZjTo5RDIez2k2zkG5PLnAIP1zjtHi",
	"V/Uoo9k4Y0OBuPgHfAst1otE9LJG8mWHAVIakSeXNtn0+Mvxopbj45XeXroDWLO7FiPqaZAMAjAXCmOS",
	"A/EmaxJesB4nqn0mSYp+9geIKaOKXpsUtQycFMuZcrlQypzktUrmuFAs5Y9RLX+CiknUCUQgER/QJYnw",
	"PzqMqkBcDEx0gEWoLUpFwQ1lAtqHyE0oMwLPUUbHDGmCslXO8IgOHUQEtHnsbcaii4ygGYk645O8w6SK",
	"VkVGZXKcKWglI1PWYT4Dj4vFTH6SP84XSyd6Va/uNXQbjsXXNiaBEa3cY7nes4zbhusQS7BDbwRAEgnR",
	"kK9B9ZXEQgm6NlKnv/2e+n8MGanT1D9ym5g6F0SNuYSQ8fu3HYgDxF1K/GAS2vYBUK8VZQNkIIaIhlLf",
	"0zGO6NucKBRLSAZgGVQ7mWQKRb2UgeXKcaZcPD6uVMrlfD6fT6VTBmUOFKnTlOepldrDNT2BW+vZbRbr",
	"j0/qo++3RMJH6/Ozrf8PcdKfUo+a/IdOSsn7xMO27v/eCccDEtKpZcakmeAhJgIxA2ro9+9JgfqMTlU0",
	"/BFlXTrFai7JChgQ9CEr+pBgA3HxQ/nhRIH+eWbsTG4D/eOZIQF1KOCPnBjlgiH0olHHwSLRff1iQW59",
	"Db2YXAEBgs8TXKELtRk0fdi76QH1xo+BMNFsT8fEBFet+0E9FdnwfTSfAMaaEUmMfZ9/Az90jLsHzeOC",
	"OvgNruPej4hobn/9PZ3SsWTAxBOx0J9ZyM7UkhjlCzTbkPQRyrb8OCR/d/C2TH4GzB/V0JgAbzEgwvEf",
	"YeKTDBNfw9073dD+p7eGok8ybQMliWcH0iNZtwF02JgtRt6rlNUu8wNA2xP82JL44FqMURbXBh0JiG35",
	"p2SaHjF00qaZiPmbBMgT01hxx7X+OEaAPx+pMMRz1FQ8TUNczsWA2PaYDMxcRKShkBPa6NXmw5hiNSkR",
	"EBOUMLMPdq6CAo+j9ZZfC4FsNp7vbhn9WDWAuwG7lmKVjdiCKShAzgTpW3G1v19kq2zwSAXyCumpgGbi",
	"tsPmL3PEsLGKT0pygVEbjHpDoL7BBg5i6AhSlSSJZTF25cufX2LcG04pljiAuo7lD2jfRJYgyB8dvCrr",
	"5WBIpYw2LFSM2dmZUK7ig0RWQTOOYgTNT2LwN9qJ0do+3kRM4eGs0bEZeIdtys/U89Anh+FDLP2ymQwl",
	"wXbdl7Fo8mrDpCB/tI3q/PbsKjmvs8ObVw+uspjmnFWQhMgF63H6Add2M1PpcMqJ0hZz0ztuPJzu4cZ9",
	"YywSTLuBbcRXXCDnYHjnmyEJAKPBUST37VIuTIb45/LeLlzJ1XhhyKUcC8pwUtTVWgoGQfQbJfIhJYC7",
	"SMMGlmtKwHYclAUjC3E0JlujF9i2ASX2SqUsONKlNdORy6k9R0HiSzCM5miNZExCLbseAiw4sg2VJF75",
	"wAhVmUE4h9iGE3uj9Up6AKNUAMrGBJJVkIp1IRPRgFQHLqPSH3xVNIeIXzgSHBgY2XoIMzYdzAE2CWVh",
	"MuigVR6EEFaJBQnE5lhDn9d1LmefkEPqYV+3Q8CK4/7XYLIKU+1R4jdaaWCGFtBOtooOJm1/SCE+DUQ+",
	"QY7/8V5qiCHkd/yTxCSZ12jWaN96DaPfSkPHP2Mj7niSeUiiaR1Q/ahoV6M6SjQGWzGaHAEjmdGEjO5h",
	"wZpCt/58B3ByQKmmLCXi8GmrrxMi+3AtDloUn9X7NtY+qGTKz7es+852H5OXsE68lt5Cvlje3uN7mIjj",
	"shJe6fBcionYFvjcHLK9ji8yOL1BneQBL5o3e0o0E0+bIfF+0h4SgJaYC7n1Ho7qV2f1wRkYCsrk1lyz",
	"IeegoUBkd0smwY9MgOHdLW1yOCfNMkkItLHjUiaCkokqvepA7hE8gUCLmJgEgXd2TEbrnLkCtFNRWmBh",
	"BXnyi+aNdAiSaWmwsLBmSTMvfdW2J1KwgrKeRO/TkgVtQ/mkjWsMS01j8kXz9y8sA12cGXv5fEnzPKyr",
	"v9AX4DMjRAcgj2T6JdWfKUVtSolxVsop+u8jBYX1nJRbnUSYK2iUv3JLE/BTlWfXrITyN9YV9DDlngVD",
	"hEBYa9Bs6ulZk1Iz2KBwX3RUESK3LjgFNbwoE9N+qOrZAmcCysPPgWZTLuPXYKPkbzjG5JegthSKpy+Y",
	"62FfJZs1i3JEAPQEdaDAGrTt1S6TkfeJnoRkXxfwRc0bhJ9LehWUbUlOEl8lntkxaUHNCoVEcT2IWQFc",
	"c4qFkU2ABkjKs+BeUeBnjTmADJ2OCQAZ8EU6s9PfkQOxjfXvX05BnQD1C0BdZ4hLEYRChoAMcWlDN7g0",
	"CQLsTCsLzikDAffS4Au0sYb+FdmUfskGmIMAoO6P+yQNPuoAxHu4nVVGRXwZ6Lr/gq7LXSqyZjAoHBMl",
	"SRWMPsuNYP5h9VnStcMC3cGEJ/JApw7E5PR3/1+JUKknGHpYIOA/Bb+4DDuQrb7Gkdu2j1Btr2RY4q8+",
	"FMHYXY5sVO8LoAx82aEpWes+Fk3M/TG+cZCCCiBZjUnI321t+k1FT6cxqUitA99QHg5dvFQ65S9bnM1y",
	"P+gzOPrwTzc+pUM3+aGP/XHFRBXqS/gvu8UiyDVEdEhEZsIg1jOlfKlSKO2NGCLg0vtqk1tJ33iHEtMs",
	"LJAmPLYznWXt+OW4/L6f9x8fkDsdrVykMp5+rWHfmOvhSH6lZry9s/0BezPf279Q96BM/3asFWuyirJu",
	"iys7pH8LV+E9iULhvuHgTPA6/P10JjzIIa9ZcRiA7VpqcgJ6Z5qfSu5KjcR28KdPmf932EUTZIBjshiR",
	"sAgquJBo4IJnmOXh4E8LRn9x6K5/vvnE+A01wUOkmyizrnMFv8JkUfAAEy6gbasHpub6/w0BmFLh1hZB",
	"/bs1YM5dGbklzqobFGKSE6UbHT1HOmUw05RRWaYB+TtxpI0g3xlZzBfz+ZN8NZtPjI0Qm/sJ9M2IMASc",
	"0SnOGgpxYIaylJnqseVNtirbDCfnYvls1xCWi+mEIsMcMR4rqZX2t9EF5G9QBQ29G4gbriSZzHUVOsH2",
	"S08alEaIqpjG9pxESUzw5Xvg3zMFSg0O4U5S/iHch2+DnGGSnBYI+7LjjA/3vvE3ggpoJ73a4YJCml43",
	"dPt91P7g9Lvb8nQqMP7xXlTIEEnY1jYhkRsXhFVeEAaFafBLwLpTkC8e58uTog6P0UmlPNFL5UltUivC",
	"WqmCKrBa1YuT47xhwK9pGU5BMGGQaFbGxjME2LqCs4HHLGTnajnfOeakFfi6s9uIf5GslEa8Urx/2Lst",
	"nnFO7iSXYiy1AhLi7j1ZWt4Ro6R6X7D4CkPSKu+W8ROjkkQikEvfeRMax4/MX9zOYdPRK++9IjCMit6J",
	"MhNeREzWng44P1B41y6lfSasaZTeNRLbxA0H5CiQjrjN1nSSZUi3oN8eKB0ZIiKnYy5yUvBqG8mTcCjP",
	"UZ47wJRrFtJmL6ZrRuYbaYY2XXOGEoqTFzcXYIZW6/KB5PWmJKGyOKpVO5ztdi4qI//XaF20r8DNxQ24",
	"uWv02k3QbT2BRu+62VWvx2RMnNv2VeOirg012mjVz3pG7elyht46x1C3+0+LKry4aNsdaItaZ1pc5hrF",
	"7pHVNtre8kK499MqGpPewDy7qx5P4aji3p9VnPN+p+TOEEGDnDZyXl9vZ1erW249Funt46L1djecFJpX",
	"/abRvDBnj7Xb4pi8Pc9YW2uy8/xtccG6Ext6unV3hO8hqZ9xp1B7ar3ySaV+V6rq4o71S7dP+oN5Mjh6",
	"xDfGfW0wJt3GdJQvze8b13p/yJ9KJz3YJMdtt3A9d2vtFs21Uev+qfDqNK9v6rCbn3QuS55hlpsemvGj",
	"0XBMFrcPI9TsLb3n3vF1/5Fe33QX8/6tsZyYhcez2tx7znfFNKddXRaX0MsvHV73Ti47LprNr28GS3tM",
	"Vq9iuno2GL3H6HzlLp7N+e1CENKv5cxhy8t17kfsKV8pOq27UbWpTarlmXZ5Pjo3+jObzC5yY5I37sr1",
	"Aazky5el5TQ/ExNUmne1m0d6c+11G/f8cjjP5+8unuqrG+StjmpV7S731LL61VlpeN+djskxaj+bK9y/",
	"zi/swtPF2aCrefZixk/qR549Mwt0NCnz0pvzPL/JVy/oaPlQLk5ht/IwPLqynhEak9px/pHeWxOt0HWH",
	"R1PjmU45a4nn2s3k7vnoaX5eG7hMf6iz6eWkMyt23EG3vhxZS35b5w3rojAm+Z63LD7AfiNvFtuVG62v",
	"d3La65Tma5rGpo1HDy8fGK5g76T/6NZeRzlj+HblcL1tklru9bk7Jrh269mGV616r9ZDbiGKE0GwMAf8",
	"dWot+9706a78PClbM3Fes7p3ucfHarn4avUq3UV9UL+tN8ZEnJ1fPD8M5prTMrtn/UJ3WK89O/ezSalj",
	"9Ub9Qu+xsYIPBUsjdj18rl125tC5n+rNynxMNEc7wred60aj32jW6+Vz3Gqhy2OHWeeXVe+e3/b6/WL+",
	"qaI9W2T5VDuvO0qHmheL2nlzMWuPSWPRvji/pZ1mnTcbjadmfdFqXpqt5nm5Xm+as9vN6KOrp3qu2nhy",
	"TXs1rD8/XVrTVdcak9yRcfx2Y9zPJ5fFfOu1NGtXr88bV3nSezxq3BUcbz48eh15w9JDjzVKTunCs4Xb",
	"HbQ63Z5wKq2zMSmwi7fHOh0VVu7JU7vWq5/p/WbzejWtTzl9uKtVn+685lFuQqZshAbF3uC6aaxumtXj",
	"h5NaBV/fj4lTGR5N+O3Zotos9pit1/vl/plHV8+FIRYX8Lncve3di6NRCxbKmD8NL5rTN1q9eardlzrX",
	"s0p+TMzXB7NWvMpNnGLrbVgd1UoPrbNJwZ5Py217vjTbr11kFgpvj09Lhz0NnzudpjF/M47sq+GxtzQv",
	"x2S6zHXyK/u52MOTC3Z8Ua+vrk/uHlj9ebgY9vMtbTqqLVpNspwNz7zVq/OwuJ9fNR69Vvu+do1KT2PS",
	"x3cFo3NV43r1zOXny0r/6FEnfXI7PLpk09FN96zkPDC7rpPWyNKf7mvT55n7YJ2teCl3coKux8Sa5VmP",
	"rPLTq8UMekYO39WutePHeX827Q36HbNyd3LfXXW8hwfxtngk0/5V5WFw3njtlvkzdfr9MTHEZHRZOKqs",
	"JoOHXL00b0zgcvBQFNW7t6up9oZmw+cWhr2rk17uUus024PC7XntuFY80+t26/xEH5NZ0bzFT8PbOoSd",
	"fKdTf7ucD2aDTq9ndotPt0/48up+VRSlzurc4Aw6lcWw+XBtWDeoveo1Rs+dMZkz98q+mSCDj04q1ZFR",
	"bFy1PfPtmTUr98uzYXf2bA6swv3FfNi+Jc3V2+x2ddy6K77euPihciJtlHXTfnxmXap1S93e8CSH3zq3",
	"o4Etpv36r2Py640xqo6J8i6tq7OPXE9izkQVmV84t5NdpYMEtDGZJftvB8v9Pk/YdoXj/im95a/++0yp",
	"OPby+eKxjCB+Xedx9jlzH4kd7CG2iVjTIF9nNUQE5Qr/P4N45ddahguGoBPBDOV/j8v+E0Wf3KJeDw+g",
	"JVrBTyxmYWKGEQPwy/wqfN/EDAByGVZwgFVdYZPzVt0DY/KLi11kY4K+JnYSxLKeYWsR/WSbBrO4s/8M",
	"3RkSiDmYIA4WFgo2M37RYetMiwqL/CBSzUplVJLCpYSerlgYPtwpoe/E4JrAc7/6GwRx2wcrkcaQyMhX",
	"keV0IecLyhK7DWRk+ZIYosYj1ANEBBOOTWvnIGlyQ1s6RZkJSdDYspsIKedLxfL7WZA4ydEVycr1jVC+",
	"l/CdbcAWYeldpm/REOFgZPZJ+6t4Nx5ZHXwWZSfpmd47Zvcg6b4hsSL2Xhzxo4n7hrzTmPj9WzpWTMU8",
	"PIPFELT9viZ1dgdMPAHi85M6CJVWIgGoMSYJbMsCBddBkAQFJ2jbIOFD4C8aHxPIEIA2p4HWx/DC9bdB",
	"SXuOqWqs84+oSoLHhHk28vu2GDIoQ2mwQMCC83XZXQkCUBVjObsJAnDhFzChUCfNOPkixsSlnOOJrYY5",
	"eKmKxw4UmgUcyhAIuAwENZWtksZyLXbvZbYiOffPHI3azjwfLo0Hjtit9nxCFg8ckdwHqlpQPp97X2fv",
	"D6m++AOD8st7TeNBHiJcnW876/jJLD7zCHkvVR8lJylXn+WldR49TMlvUu6JEHlSl7cqJm4XjDa2W71M",
	"vKMg1ti/6/Q4tzJIL1YqhRNQr9frzdLVG2wW7OezduFq1KrIZ+0rdtFtsf4TPur37xbeJRzUO86gR9tv",
	"A6P4elbUzypv+cZomTteJhERT/F7HLH9Ge93qn/KiWkew2I1lELhM6iBIPMZN1F/nYcOq/MwCm+7UP7T",
	"/24NVbpq/84LTAwaD8uGQTFf0CCWUk01fsnDrzVzGZrYWEPBacbgmo26CzULgaIqRih3u458F4tFFqrX",
	"KtwMxvJcr91sXQ1bmWI2n7WEY6sVxEKx7HrYUOiDihkDqmsFQBdHMm2nqWLK750j8sVpqpTNZwsqZS0s",
	"xaacZlOCeO53rH9XcpXUV3WBhN+zorRFdViBQAkAZUBqpY1E2DLtnyZQaWpJmWrCwTw4DRWJ/ShTJflN",
	"75BqT5cBoFI/pCM9G+3Pa+s+KdFzlemtS1t+Sz6YHJxB9okXFJiqs0tdhSL5sLkJJTjHEUqcH2dt7kX5",
	"4ccfv6lTwOrYq1qMYj4ftngHhQDounZwpCE3DdobNwR9aJEjXFLivM2ZKE+kiJR/IOqgbhtH2ia+3w8k",
	"A2DdR13461HXPWEBQWdIbS+wT4iPvfTXY78j0BMWZfjN39K4iEnZAGvZ9ikp/x2UzAhdkJ0lqPwdq39H",
	"0NJFmrQTqhcAUE3zmNS0qAlXWhwa79++SR3hnuNAtgq6AqNGSBmvtTwpODktcikRTTpX0lSnYAAEBC3C",
	"oWngUjl1rIJjjRIetI+qFvA5YjA07sreB/2U6vYlv58PM6AjOSToDYwZrhvKRXj43TcyiIvwGP2P0fjt",
	"A6Dft92nNGbfY/am8KOxt/WkpQ9eAgtyuX5MIP3fZnTY5mjoT8vz0/IcaHkCo5FkaX5U8PSJeCnk4Z5A",
	"aet88kGh0hrw/7FgaYtTCRK0zZefAdNPs/VfGjC9a7/8jWA0akqIX6I3+BxkTyLG6j/IivwFsdfu3Uh/",
	"d/SVdJNSgkipE0posWmKnyDph4KD4cl2TaClyLk2xDv0JFwTepj1Kv8oBEm6+X3La0u2bB0H+0AB7KAZ",
	"8o94cQMTzK2IEwcf+nAsNq47rXYUKivuIAEBJr4MY0oAnFBPhHfQebb4yM2rXs6fTn6vkw9uXkpUDSkC",
	"61N7/r2N6w0iJoBQVVfFmmdDFhxTAr8Ii3qmFZQ0OsPrq6/Z/zlFulBH0sywAh1KeZIabd0i9aEurb88",
	"QJ0G6kpTru7BXF8FIYlRe/DAnJHo5ZlZoM6hrT/WqFIsHh7AC5ZPRwZWV6UKEE3HBtc6+O0HkITXPGRC",
	"cNnKB6q4uZ3rpz7u1ccNs95Ryq3ljinm/6aubavHAUoX6TL+WOeCD32Vi+mZf2AWLaEmthzR+kZhHbmI",
	"6Hxz14rStXXqXx3j/EgzQjp/KsZ+xVhfAPeOXoRL+Rm9+LlJ/blJ/U/bpMZsU5K9U8CjMUXMxGxu6YgZ",
	"l6SZbT7JqQM877U4RL5TJ3z+UtXfzCFJ2v1rJakBAmb8VLN/j5r5gv7fp2RwLUDQtsG6/ymUpo2a7c9o",
	"Q+I3PRBtfU26T9nmQpHJCijXmayoh+ePUPD5n/L6pb/Zh7+7lOoFiD77qcU/tfgzWoziEiQ1d93k876H",
	"vA4+SZb7bWIDcEqf5c5a8iDYM/83xhYfTuf7ug86yRL1g9tNqO5p/pU866PX221c0MVZiYdbOPi/KIAu",
	"9m83zajsAWKZ8Gql3LyoIo6d5jIBTUzMjxBwAU30J9EoJpLw9pU1mn1wvn3//wEAAP//9FCifjJrAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
