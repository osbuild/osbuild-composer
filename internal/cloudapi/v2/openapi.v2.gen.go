// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for AzureUploadOptionsHyperVGeneration.
const (
	AzureUploadOptionsHyperVGenerationV1 AzureUploadOptionsHyperVGeneration = "V1"

	AzureUploadOptionsHyperVGenerationV2 AzureUploadOptionsHyperVGeneration = "V2"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Choose the VM Image HyperV generation, different features on Azure are available
	// depending on the HyperV generation.
	HyperVGeneration *AzureUploadOptionsHyperVGeneration `json:"hyper_v_generation,omitempty"`

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// Choose the VM Image HyperV generation, different features on Azure are available
// depending on the HyperV generation.
type AzureUploadOptionsHyperVGeneration string

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ygAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
