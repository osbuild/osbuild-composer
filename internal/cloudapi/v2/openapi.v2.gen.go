// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// Enables the system FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string `json:"installation_device,omitempty"`
	Kernel             *Kernel `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *Services     `json:"services,omitempty"`

	// List of ssh keys
	Sshkey       *[]SSHKey     `json:"sshkey,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiunPubKeyHash         *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure     *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts    *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl *string `json:"manufacturing_server_url,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *struct {
		// List of services to disable
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
