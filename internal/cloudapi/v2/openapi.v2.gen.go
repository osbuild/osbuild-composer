// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name   *string `json:"name,omitempty"`
	Source string  `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container  `json:"containers,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`
	Packages   *[]string     `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vn3//wEAAP//qIL3tG9rAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
