// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for AzureUploadOptionsHyperVGeneration.
const (
	AzureUploadOptionsHyperVGenerationV1 AzureUploadOptionsHyperVGeneration = "V1"

	AzureUploadOptionsHyperVGenerationV2 AzureUploadOptionsHyperVGeneration = "V2"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Choose the VM Image HyperV generation, different features on Azure are available
	// depending on the HyperV generation.
	HyperVGeneration *AzureUploadOptionsHyperVGeneration `json:"hyper_v_generation,omitempty"`

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// Choose the VM Image HyperV generation, different features on Azure are available
// depending on the HyperV generation.
type AzureUploadOptionsHyperVGeneration string

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Architecture to use for the compose. If left empty the host arch
	// will be used.
	Architecture *string `json:"architecture,omitempty"`

	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	Cacerts *CACertsCustomization `json:"cacerts,omitempty"`

	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CACertsCustomization defines model for CACertsCustomization.
type CACertsCustomization struct {
	PemCerts []string `json:"pem_certs"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Cacerts    *CACertsCustomization `json:"cacerts,omitempty"`
	Containers *[]Container          `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// DepsolveRequest defines model for DepsolveRequest.
type DepsolveRequest struct {
	Blueprint    Blueprint     `json:"blueprint"`
	Repositories *[]Repository `json:"repositories,omitempty"`
}

// DepsolveResponse defines model for DepsolveResponse.
type DepsolveResponse struct {
	// Package list including NEVRA
	Packages []PackageMetadata `json:"packages"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch string `json:"arch"`

	// Optional package checksum using ALGO:HASH form
	Checksum  *string `json:"checksum,omitempty"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// PostDepsolveBlueprintJSONBody defines parameters for PostDepsolveBlueprint.
type PostDepsolveBlueprintJSONBody DepsolveRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// PostDepsolveBlueprintJSONRequestBody defines body for PostDepsolveBlueprint for application/json ContentType.
type PostDepsolveBlueprintJSONRequestBody PostDepsolveBlueprintJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Depsolve one or more blueprints
	// (POST /depsolve/blueprint)
	PostDepsolveBlueprint(ctx echo.Context) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// PostDepsolveBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) PostDepsolveBlueprint(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDepsolveBlueprint(ctx)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.POST(baseURL+"/depsolve/blueprint", wrapper.PostDepsolveBlueprint)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wAAAP//aYwEsKvSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
