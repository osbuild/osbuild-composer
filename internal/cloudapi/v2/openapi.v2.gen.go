// Package v2 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   ImageRequest    `json:"image_request"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	ImageStatus ImageStatus `json:"image_status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Code        string `json:"code"`
	OperationId string `json:"operation_id"`
	Reason      string `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {

	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	Repositories  []Repository  `json:"repositories"`
	UploadOptions UploadOptions `json:"upload_options"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       ImageStatusValue `json:"status"`
	UploadStatus *UploadStatus    `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// List of ImageStatusValue
const (
	ImageStatusValue_building    ImageStatusValue = "building"
	ImageStatusValue_failure     ImageStatusValue = "failure"
	ImageStatusValue_pending     ImageStatusValue = "pending"
	ImageStatusValue_registering ImageStatusValue = "registering"
	ImageStatusValue_success     ImageStatusValue = "success"
	ImageStatusValue_uploading   ImageStatusValue = "uploading"
)

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_aws            ImageTypes = "aws"
	ImageTypes_azure          ImageTypes = "azure"
	ImageTypes_edge_commit    ImageTypes = "edge-commit"
	ImageTypes_edge_container ImageTypes = "edge-container"
	ImageTypes_edge_installer ImageTypes = "edge-installer"
	ImageTypes_gcp            ImageTypes = "gcp"
)

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// UploadOptions defines model for UploadOptions.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {

	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/compose", wrapper.PostCompose)
	router.GET("/composes/:id", wrapper.GetComposeStatus)
	router.GET("/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET("/errors", wrapper.GetErrorList)
	router.GET("/errors/:id", wrapper.GetError)
	router.GET("/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
