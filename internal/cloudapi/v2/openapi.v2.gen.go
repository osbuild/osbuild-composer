// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`
	Files              *[]File             `json:"files,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap           *OpenSCAP           `json:"openscap,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the CLOUD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local-save"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9eXPiONP4V1Hx/qpmp8J9JCRVW89LCEkIkAPIuWzlEbZsC2zJkWSObM13/5XkAxtM",
	"IDuz+xzv7B87sS21Wq3uVl8Sf2Q06riUICJ45uSPjAsZdJBALHgykfxXR1xj2BWYksxJ5haaCGCio0Um",
	"m0EL6Lg2SjSfQdtDmZNMKfPtWzaDZZ83D7FlJpsh0JFfVMtshmsWcqDsIpaufM8Fw8RU3Th+Txn72nPG",
	"iAFqACyQwwEmAEHNAgHAODYhgAibYnErPqrtR/h8Cz8q0I3HQatZbtqUoKYkH1cDQV3HEk1o3zLqIiaw",
	"RMSANkfZjBt79UeGIVPNZ2OgbIZbkKHXORbWK9Q06gULE8wsc/JbplSuVGuHR/XjYqmc+T2bUZRIhRW8",
	"gIzBpZo7Q28eZkiXYAIcfo+a0fEEaUL28+d379oU6jeK9PxPTzBCPIO83BxxkStlsn/ntLMZTqDLLSpe",
	"/dWO4+Qsc+HXTazSCZaO6y4yDgQUni8lCUJBBycxgg7OFbV6pXh0XDk6qtWOa3p1nEaxT5J4bTJy3OwO",
	"HhhUvocFXG9sY80XYQN6tojaJUW6bQCOBBAUqM/gF2EhEHQBSni/ZgEENiVmFtCx4XENCqSD+353RDAH",
	"DAmPEaTnQVtwgBYuZlCCBg42LQHGCHBKCWJAWJAAgzJAhYUY8NTcRkRAZiLB8yMyIitcBPOQHJZblAnE",
	"5GggNhiARB8RnBwQcyBx59BBAHI1lHyODwdWo62WaEypjSD5/kXdbzm3saLH7HRVHB9CNkqF/+4x9D3s",
	"gh1ookhC17S+pCg1FDV9OiIdqA5y0YHjcbXOHsFvntyaVEMTzxABDHHqMQ0Bk1HPzaslloPIxaIOFpKT",
	"DEYd1UVOFHEh151BolMHUILAGHKkA0oABPf37TOA+YiYiCAm2dBfyIRCUYilSaxNNSiC5U1OsBt8CSfp",
	"MjrDcpIh+q8K/SyYW4gh1USNItnTs3U1+ZAukMhuJuYCMYXfJZ1LjrYxFwDaNgjR4CcjYgnh8pNCQaca",
	"zztYY5RTQ+Q16hQQyXm8oNm4AOXaFgJV948ZRvNf1aucZuOcDQXi4n/ge6gLX+VAr9EgXxTJJcbhK0l6",
	"QgXgLtKwgZGeBVjIlzrSPS2xIFvosE50KR7Ik+yUrijjfT/mriS77EHudVSG1NMg6QdgLtSIadudN45Q",
	"eMX6JlLtM4lSvNmfQKaKanp9XNZycFyu5qrVUiV3XNRqucNSuVI8RPXiMSqnYScQgUR8gJdEwm+0H1YB",
	"CxqY6GqtfQlVOgPcUiagvQ8vhnwo8AzldMyQJihbFgyP6NBBRECbb3zNWXSeEzQnh875KK8RqaYdIaM2",
	"PsyVtIqRq+qwmIOH5XKuOC4eFsuVY/1IP9qpeVcU21zbDQ7coT+36eekhtxH5awhGQOQhkLcnj2l+lKO",
	"Qgm6MTInv/2R+X8MGZmTzP8UVg5DITCJCyn28Lff1yD2EXcpCSxl294D6o3CrI8MxBDRUOZbdoMiepIS",
	"pXIFSRsxh+rH41yprFdysFo7zFXLh4e1WrVaLBaLmWzGoMyBInOS8Ty1PDuopqdQK5rdarH+/KQ+ap9g",
	"CX9Yn55t/b+Ikv6UutTkP3RSit/HHrZ1/3nNYwhQyGYWOZPmgpeYCMQMqKE/vqX5ElM6UQb7R5h16ASr",
	"uaQLYIDQh6ToQYINxMUPpYcTB/r9xFib3Ar6xzNDAupQwB85McoFQ+hVo46DReqe9YsFufU13LrkCggQ",
	"NE/Z/1yoTaHpw16PfagvvjGFiWZ7OiYmuG499BuZmE/60XwCGBEh0gi7nX5930b9pHWteVxQB7/DyDT/",
	"CMNmsvW3bEbHkjpjT2x4J8xCdq6eRkWf29kK34+GbMvG4dzWOycZ9jNg/qz4bnB3ggCx5fgR+j9Na/EI",
	"7s7phptDNtEVfZJoKyhpNNsTH0m6FaD9+iQI+aCCdevEDwAlJ/ixmvHBtRijbNOS0pGA2JZ/SqLpMS0o",
	"FZ6JmO82QJ4ao9vc1aLGGwj485ECQzxHTcXTNMTlXAyIbY9Jq81FRGoROaGVXK0abghWkxIBMUEpM/vA",
	"fxYUeBxFUQktBLLytrY6rr71ugk3YmMVMUkAFRQgZ4z0hKntu6VsmQ9eKdtejXoioJnqidj8dYYYNpab",
	"o0syMGqDYXcAVBts4MDBjg2qAjkbkZZ1BvMnmGoVh1P6nuDGB8sSrQdDKqy1IqEizJqzQrmyHlJJBc3N",
	"IYbQ/OQIvj+fasvtok1MF+5PGh2bwfaQxPxMvQ937NC42IgCrSZDSeDB+zwWD7CtiBTEuJJDnd+dXaeH",
	"l9Zo8+bBZR7TgrMMYh2FYD1OPqDaevQsG045ldvUzttHLuVYuq+bEj6GHAWziJT7CsPQh9Z0kmdIt6Dv",
	"P0sqISIKchcryB27XqgXFvXD18NqQQKkvEB5IWHQM5zKZGt7g2YhbfpqumZMT8bCmf5nhly6vQ0icGwj",
	"Pf2jgW0UCs8GMqZrTtEyzZjdjnBC26+aOUhAG5NpOjUdLPcRnjeQThl0GZXLlafMLIT9/iHn+Kv/PVcp",
	"j7xisXwImWb96lN5D9L6g0jDchOJCAf5Oa8hIihX4/+DIRtBjn6t56QNDJ3YyFD+/7Dqv1H4nUKObgZ7",
	"4LKV5C7DlGGxTN8yObdj2nqHzk31BkMJiFuqnzFzQ22wv/Gz2kzT2FshoxhYySNO8wlaC8EgiLdRKjd0",
	"IlZxToAJSBrieTC0EEcjkug9x7atAmgc6XIj1ZHLqT1DQWhXMIxmKIKfB42IQPYyOyJCglwNH0LjcBZE",
	"h7HjUiZ82FLn/bOAhFZYek5eoZHXC/8EUQBtRALFulKI+9F1XZOlkDccBH/CWD0LEUsDKNXF/qDOsY22",
	"QllygZxPgQq6pACkLiJcg+4uKDcuIoNm43bdB41lQV3KhckQ/1wG1IVLua39SxiZEnu5PzePSGiu3AwA",
	"FhzZhsoILn1ghKpMD5xBbMttIzJu1DYMGKUCUDYikCyDvJsLmYj7/TpwGZWW9VeFczjwK0eCAwMjWw9h",
	"bkwHc4BNQlkYaN+LMz6WAI7YDGvo80YTjzbNtUwS9o2kELCiuN8ajJdhXjWO/GqnMTBDc2inm5cOJm2/",
	"S2lzGrE9fDc6fuOd2BBDyHb8k8ik2anxiPyu9RrE20qLkX9mN7nnaRtJGk4rPbZBtEYgXCslLMnmm+9h",
	"7sTABNoAMoENqAmfH5M8ggj3GHp1IQuLez7Ow7dUeyAsKPzcm+oIYjoaoAWOG7kxO21Lak3lv0LpW80G",
	"cgCDDJvKxVImn/Gas0hVTcYqA7HOBZsWiHS/Haqn1Swh5mDOpaoCPoBIc6zQwgRQTUAbBOZRHJviUa2W",
	"HioUVlqYUFjh7hrBT8BTW66z1DFLdVO479wnod7MiV/7lEJN2SNGTO9HEHPNYFNTTTPZoijLjwqBacEa",
	"btAlEbiRPWAsgZqS+N0vgqOGi5qvAU6PMqkpdwNbfb9pq9Yp4b5QreylX3xS7wrF+6DSMVdGz3aVI22f",
	"P6NtwpD+ZohG4h8yrYIOOXBtKCGjRWr4/S/UXDvCQvspsnAWSmcFyitSZv8SHaYw+lB9HVarf059SdBp",
	"mit4/2dU14p+Xki/SH39fVrrPGHlr2XKMHkN60cjdErFcjWZHvMwEYdVZZBQjwiXYrLmvBdmkO2MCsU6",
	"Z1dDp+F80bz9njDk2NOmSGyvgIHEFxTJWoNh4/qs0T8DA0EZNBHQbMg5OFUg8us1T8FDLhhhazYoPRAq",
	"7XCSEqOOHFXpKqiqSx00qeN6AoEWMTEJvNL8iAyjAhQFaK0kbI6FFaiyi+YtCCI4WTC3sGZJu146J0nX",
	"Q8EKivZWTnMetI1k8VJUKzYiXzQ/9M9y0MW5kVcsVjTPw7r6C30JhTYYTkqASGD9mVqyVaHgJinlFP3v",
	"seqcaE5hPCAeBYjR12DUCeipii8jUkL5jHUFPSzlyoMBQiAKOtrU0/MmpWYQ2uc+66iKnkJUERYU4SUr",
	"wFSQ17MFzgWYR9Vimk054iLUR36ofkR+CQq1Qvb0GTPq9lWSWbMoRwRAT1AHCqxB216uExl5nyhHTndu",
	"ArqoeYOwucRXQUlychr7KvbMj0gLalbIJIrqQTgLwIhSkQ4NhgES8zx4UBj4ep8DyNDJiACQA1+kXj35",
	"AzkQ21j/9uUENAhQTwDqOkOc+7smQy5DXO3U0ViaBAHWppUH55SBgHpZ8AXaWEP/G0vnfMkHIwceX8Pv",
	"90kc/KEDENvGdpY55eLnoOv+L3Rd7lKRN4NOYZ84SmqT/iw1gvmHdYcSrzUS6A4mPJUGOnUgJid/+P/K",
	"AZV4goGHBQL+W/CLy7AD2fLr5uC27Q+oEhPSD/VXH4qg7zpFVqL3RW6rX9ZwSpe6j1kzrNX0lYNkVADJ",
	"ckRC+ial6Te1/Z9scEUminSE/LDv4mUCk+xkk8yZbCYgcPzlX3IgItp3f1xtntqbJfzX9doryDVEdEhE",
	"bswg1nOVYqVWquy0ImLgsrtK/RJlEp+zISDTLCyQJjy2Ntco07Fl7/df71GKMFy6SBUQ+HU9O6Omg6Fs",
	"pciRDG/+gACdbwG8UnevwpmkcbZx5iJOugRV1lD/PVyibeyGQo9778KKyHH8dGFJUJIRkWI/AMm6xfR6",
	"jrVpfqpWIptRwVz/Tx8z/++w9D0oqNjgxRiHxYaCczkMnPOcBXPM8nDwFPuTQzd6fPeR8avgEXSPEl+S",
	"D7F+SDdRLio7C57C9FPwAhMuoG2rF6bm+v8PAZhSYCONov5NdMBUrOD7Dyvw8nm9MYPzCNyMu9JaXP2V",
	"ozOYyWZsPIuPkkbUTlBW9SdKIlb649zPnjalFZk7hXyL3avyncme5WK5WDwuHuWLqbYcYjPfJ93M7E7p",
	"BKekdeVryxvvkxCHfLquwavlbEpydIYY36ieq+w+1BOgvxoqSM+uIK6okqbro2rUlE1L7vxBFRRRlZMb",
	"kSTis5Lfchv4bWpKieg+1EkLkIfRtSTIKSbpwb7w8GlKVjpw5De/CCqgnfZpjQpq0Gx0atU/LOp3zm4N",
	"tmXVqR77e/x16czYOQ5naHcQbGhhHrmWmACNOmNMfBdKmW3S1mt2b+7PXrs3zUZ30HhoAURmmFHiH54Y",
	"kRlkWOVmgpSvz3qxnA2HM+mc+KVeandRDpd0q4BEQB3Ik160jmbIpq4ErDx6Suxl1vejfYNylcHzfX62",
	"5Ujc2krEKJJG8cAUOPkjpS4AEZFa/dNQZ/tUJCALsDoAmI0IKediIKFZctoBlDxoO66NUeAt/NNj9j9l",
	"B46E9OnnyLazI+KHFhKpfAnMCap+FUXy6UVKfvwyJZoKiYSFsEpswqCAGfwSiNYJKJYPi9VxWYeH6LhW",
	"HeuV6rg+rpdhvVJDNXh0pJfHh0XDgF+zftRtzCDRrJyNpwiwqJZvBY9ZyF4VCsnt6eua97zZIl1pG5tF",
	"w3t0s7izm/HPkEDMwQRxMLdQQBrfJU8cn3IggSZi4BcNEt1GLiZfAdYREVgs/aOdPpsBQZV747uD6kNo",
	"IOZBkxLuOYgBTTKXqjdcL9iAHGg2loyfbGMhMiIRL0V8IGUiZKwth0K3Hszc5P+11MqGIFjBUmya6Ola",
	"dYu6TSuBDZSkGiFVNsPihg2kXEYNbKP0NM6mlxO2TRtkvbZ+87w106zUmSKXbvmytRgqZotsGh3YdPTa",
	"tk8Ehu7TFhc15UPMfthxFs33KLYaCVmfCBGO0gxPVhyuV/mG3ySjGtj0/OxYfkQaAkiYQp2TDSJTX4IK",
	"xS9Z8GVVtKaegmK5L2C1JirQNSJjtApLqBirQ1kI0QGQofWoBWW6HwxzGdKQrhSX3H/iB7DluFIgx3SG",
	"0nJWsVLKv6+C8tMVk7tyX6pIApiuGRRBJ08Sr5RXpHK2aJlVNeVa6uv2AkzRMqrfkey7qglSUfWkkkxs",
	"EDn532nron0Nbi9uwe39abfdBJ3WMzjt3jQ76vOIjIhz174+vWhoA42ethpnXaP+fDlF71eHULd7z/Mj",
	"eHHRtq+gLepXk/KicFruHFhto+0tLoT7MDlCI9Ltm2f3R4cTOKy5D2c157x3VXGniKB+QRs6b2930+vl",
	"HbeeyvTuad56vx+MS83rXtNoXpjTp/pdeUTeX6asrTXZefGuPGedsQ093bo/wA+QNM64U6o/t974uNa4",
	"rxzp4p71KnfP+qN53D94wrfGQ70/Ip3TybBYmT2c3ui9AX+uHHdhkxy23dLNzK23W7TQRq2H59Kb07y5",
	"bcBOcXx1WfEMs9r00JQfDAcjMr97HKJmd+G9dA9vek/05rYzn/XujMXYLD2d1WfeS7EjJgXt+rK8gF5x",
	"4fCGd3x55aLp7Oa2v7BHZPkmJssXg9EHjM6X7vzFnN3NBSG9esEctLzC1cOQPRdrZad1PzxqauOj6lS7",
	"PB+eG72pTaYXhREpGvfVRh/WitXLymJSnIoxqsw62u0Tvb3xOqcP/HIwKxbvL54by1vkLQ/qR9p94bll",
	"9Y6mlcFDZzIih6j9Yi5x76Y4t0vPF2f9jubZ8yk/bhx49tQs0eG4yivvzsvstnh0QYeLx2p5Aju1x8HB",
	"tfWC0IjUD4tP9MEaa6WOOziYGC90wllLvNRvx/cvB8+z83rfZfpjg00ux1fT8pXb7zQWQ2vB7xr81Loo",
	"jUix6y3Kj7B3WjTL7dqt1tOvCtrbhBbrmsYmp08eXjwyXMPece/Jrb8NC8bg/drhetsk9cLbS2dEcP3O",
	"sw3v6Mh7sx4Lc1EeC4KF2edvE2vR8ybP99WXcdWaivO61bkvPD0dVctvVrfWmTf6jbvG6YiIs/OLl8f+",
	"THNaZuesV+oMGvUX52E6rlxZ3WGv1H06XcLHkqURuxG+1y6vZtB5mOjN2mxENEc7wHdXN6envdNmo1E9",
	"x60Wujx0mHV+eeQ98Ltur1cuPte0F4ssnuvnDUfJUPNiXj9vzqftETmdty/O7+hVs8Gbp6fPzca81bw0",
	"W83zaqPRNKd3q94H18+NwtHps2vay0Hj5fnSmiw71ogUDozD91vjYTa+LBdbb5Vp++jm/PS6SLpPB6f3",
	"JcebDQ7eht6g8thlpxWncuHZwu30W1edrnBqrbMRKbGL96cGHZaW7vFzu95tnOm9ZvNmOWlMOH28rx89",
	"33vNg8KYTNgQ9cvd/k3TWN42jw4fj+s1fPMwIk5tcDDmd2fzo2a5y2y90av2zjy6fCkNsLiAL9XOXfdB",
	"HAxbsFTF/Hlw0Zy806Pb5/pD5epmWiuOiPn2aNbL14WxU269D46G9cpj62xcsmeTatueLcz2WweZpdL7",
	"0/PCYc+Dl6urpjF7Nw7s68GhtzAvR2SyKFwVl/ZLuYvHF+zwotFY3hzfP7LGy2A+6BVb2mRYn7eaZDEd",
	"nHnLN+dx/jC7Pn3yWu2H+g2qPI9ID9+XjKvrOtePzlx+vqj1Dp500iN3g4NLNhneds4qziOzGzppDS39",
	"+aE+eZm6j9bZklcKx8foZkSsaZF1ybI4uZ5PoWcU8H39Rjt8mvWmk26/d2XW7o8fOssr7/FRvM+fyKR3",
	"XXvsn5++dar8hTq93ogYYjy8LB3UluP+Y6FRmZ2O4aL/WBZH9+/XE+0dTQcvLQy718fdwqV21Wz3S3fn",
	"9cN6+Uxv2K3zY31EpmXzDj8P7hoQXhWvrhrvl7P+tH/V7Zqd8vPdM768fliWReVqeW5wBp3afNB8vDGs",
	"W9Redk+HL1cjMmPutX07RgYfHteOhkb59Lrtme8vrFl7WJwNOtMXs2+VHi5mg/YdaS7fp3fLw9Z9+e3W",
	"xY+1Y6mjrNv20wvrUK1T6XQHxwX8fnU37Nti0mv8OiK/3hrDoxFRu0vr+uyjrSc1Xq2qPF85t9M36Z+n",
	"BdKOy6oS2tTiAunwBI2AX2er3M+YbQK5NCs4wCrPu8pBqvLdEfnFxS6yMUFfU0t5N7JQ4SEp+sk66R/r",
	"cSadSrDFp0wPemx4NoO1GtY1t0YTeObXrAVGXPKOK6QxJHLyU2w5Xcj5nLLUcl9p076mGsebtvEeLIIJ",
	"x6a1dqfXthosykxIgsry9UBvtVgpV9ODBXvcNeWH4aANDBuaYbUJszT5Z5g48CNfqjAoLBCBNqcA2nO4",
	"5EEkjIN2MKM13ts2Jz+UtknROMPkJfvFCLuTrmuOX4Ju2XWeSOAQW+DY4qR51JvxS7Lc+0qQtXxYdmef",
	"9SvHdnXZKIjaOcbmPVW7umw5AbqrW0r099vvqVHb4MochqDtH5VQBW9g7AmwSRKpVaDSM0gAaoxICqX9",
	"YCxwECRBkBLaNkhpCPx15iMiXWzF5r4e2xgXRm0DmZhhqg49+t64RHhEmGcj/ygIQwZlKAvmCFhwFhV2",
	"Kd4BqiZJzm6MAJzDsHRTXQJFvogRcSnnOIgNO3ihYmQOFJrlhwUCCgNBTaV9pQhGnLotFxHL4H7mUptk",
	"HnN/Bt6zx3phwSfYd88e6Wd0VZnp5zO5US54n1y+3zFI5m870R8Eq8LV+X1tHT+ZE2YeIdsSv3F00jK/",
	"eV6JUq5hgneVPk2FGJS6fiKjo2pZ+JbDu+pjaZ9jtxt7POdWDunlWq10DBqNRqNZuX6HzZL9ctYuXQ9b",
	"Nfmufc0uOi3We8YHvd793LuE/caV0+/S9nvfKL+dlfWz2nvxdLgoHC4+OhS6GtXjiO1OYG6pQlGbouYx",
	"LJYDyTE+gU4RZD5Vx+qv83ADvHochje0qq3VbxdBlZaJf08rJgbdtEIHQS2ZoIHpqHJRflLbL3XieZXr",
	"1lBwSVVwNWzDhZqFQFnlltX2HRn68/k8D9VnZV0HfXmh2262rgetXDlfzFvCsdUKYqFIdjM4VcMHxRkM",
	"qKJJAF0ci9WeZMrhsUH54SRTyRfzpYxfrq3IVNBsShAv/IH1b4qv0sp6L5BfD+8LmyrwBYGEAMpUBs9G",
	"Ijzr7t8DAcPEnqoBxTy45CZm6lKmEnir0lV1VEDau0o2kY70fPwQRVv3UYlfl5VNXDT8W/olc8F9cj7y",
	"ggJTFRar63tVUXd0e29wA0fIcb4JtrrL94ffavW7utFN3WamFqNcLMaSjEojuK4dBGILk+AMygqhD9V1",
	"jEqKnZOUidNEskj1Bw4dlAhtDtomvlEQpnyx7g9d+uuHbnjqJMIUKW8K+4j4o1f++tHvCfSERRl+9z04",
	"FzHJGyDibR+T6t+ByZTQOVlbgtrfsfr3BC1cpO7lVGVngGqax6SkxVW4kuJQef/2u5QR7jkOZMugKD2u",
	"hJTyivhJwSloq4u0XZp2IUjTP5EEAUHzsGsWuFROHSvLWaOEB6cX1JHTGWIwVO5K3wfl/OrGcL+cHDOg",
	"I9klKE3fUFy3lIvwTkNfySAuwtsRf4zEJ+/1+pbcPqUy+7ahb0o/evS2nrb0wUdgQS7Xjwmk/8uUDltd",
	"6vVT8/zUPHtqnkBppGmaH2U8fcJeCmm4w1BK3Cy3l6kUAf4/ZiwlKJXCQUm6/DSYfqqt/1CDaav+8h3B",
	"uNWUYr/EL2beS5/ElNW/kRb5C2yv9Suv/27rK+2C7BSWUgdk0Xx1JmuMVEGqf6Nful4TaCEK6qB9Ep+U",
	"n7bZT3tVf9QAabL5LbFrS7IkTiN/IAB2UNv+Z3ZxAxPMrdgmDj7cw7FYbd1+NbMKmTtIQICJz8OYEgDH",
	"1BPh7wl4tvhom1el+T83+Z2bfHChdqpoSBaIDo37v/sROYiYAEJVGhlrng1ZcEoW/CIs6plWkO+4Gtxc",
	"f83/1wnShToRbYYJ95DL08QocTn4h7IUtdxDnPrq93K4qg+N7vCUyCgfPFBnJP7jK3mgjkFHjTWqBItH",
	"91H4y6cjA6vf4REgHo4N7uP0qy0gCe/nzIXg8rUPRHF16fpPedwpjytibRHKxHJvCOZ/p6wlxWMPoYvV",
	"qX8sc9GxESlyG3Lm39eAFlATiY0o+rkqHbmI6Hx1Sa6StSj0r24R+EgyQjx/CsZuwYju9d8iF+FSfkYu",
	"fjqpP53UfzcndUM3pek7BTxuU2yomNVVahvKJW1mqyYFdR5zW/1DrJ06sPmXiv5qDmnc7v9aCDVAQIyf",
	"YvavETOf0f/zhAxGDARtG0TFUSE3rcRsd0QbEr/ogWjReS0fs9V9VuMlUFtnuqDuHz9CQfPv2vUrf/Me",
	"vnUp1QcQf/dTin9K8WekGG1ykJTcqMhn+w55EzT5Tr5fr7/amGiAitIF0iuXIMLLJP8D7ZIPp/MtqslO",
	"02K94GIuqnuaf5tcdAtHsgQMujivbne3cPBTldDF/k/a5FTkAbFceCtgYVZW1spaYZqAJibmRwNwAU30",
	"ncMoIpLw4rBomF1wfv/2/wMAAP//gpotKiJ+AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
