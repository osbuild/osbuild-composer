// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`
	Packages   *[]string     `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
