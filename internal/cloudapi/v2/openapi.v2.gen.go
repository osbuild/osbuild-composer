// Package v2 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	ImageStatus ImageStatus `json:"image_status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Code        string `json:"code"`
	OperationId string `json:"operation_id"`
	Reason      string `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region *string `json:"region,omitempty"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	Repositories  []Repository  `json:"repositories"`
	UploadOptions UploadOptions `json:"upload_options"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       ImageStatusValue `json:"status"`
	UploadStatus *UploadStatus    `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// List of ImageStatusValue
const (
	ImageStatusValue_building    ImageStatusValue = "building"
	ImageStatusValue_failure     ImageStatusValue = "failure"
	ImageStatusValue_pending     ImageStatusValue = "pending"
	ImageStatusValue_registering ImageStatusValue = "registering"
	ImageStatusValue_success     ImageStatusValue = "success"
	ImageStatusValue_uploading   ImageStatusValue = "uploading"
)

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_aws            ImageTypes = "aws"
	ImageTypes_azure          ImageTypes = "azure"
	ImageTypes_edge_commit    ImageTypes = "edge-commit"
	ImageTypes_edge_installer ImageTypes = "edge-installer"
	ImageTypes_gcp            ImageTypes = "gcp"
)

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// UploadOptions defines model for UploadOptions.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {

	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /compose/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /compose/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/compose", wrapper.PostCompose)
	router.GET("/compose/:id", wrapper.GetComposeStatus)
	router.GET("/compose/:id/metadata", wrapper.GetComposeMetadata)
	router.GET("/errors", wrapper.GetErrorList)
	router.GET("/errors/:id", wrapper.GetError)
	router.GET("/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xb+28bt5P/V4jtAW5xu3rLsQUEreO4qXtJHFhOi7vYMKjdkZbNLrkhuVbkQP/7gY9d",
	"7YOy5G/dFgX8SyKJ5MxnhjPDmSH9zQtZmjEKVApv8s3LMMcpSOD22wLU/xGIkJNMEka9ifcBLwARGsFX",
	"z/fgK06zBGrT73CSgzfx+t567XtErfmSA195vkdxqkb0TN8TYQwpVkvkKlO/C8kJXehlgtw7eL/P0xlw",
	"xOaISEgFIhQBDmNkCVbRFARKNL3eVjx67kN41sWgJn3y+/TsdPAxSxiOLjQ0Iz9nGXBJDH8OC435W4HK",
	"m3iQB0sQMuh7fpOF74kYc7hdEhnf4jBkud2ScvUnrz8YjsaHL46Oe/2Bd+N7WgcOuCVxzDleadoUZyJm",
	"8tYIXMWUroJitI1q7XscvuSEQ6QAWJncWG/K1Wz2B4RS8a1qaiqxzB2KwimpI8IpCXrh0bD34nj44sV4",
	"fDyORjOXxh6p4oYwim9JYwv46fBpd9mtzx3Mtyku54nbd6os1CQn/fucww7hSIoXUJpMwxNxCsoPZQwo",
	"12QgQnpBB51LlOZCohmgnJIvuQoXeuKC3AFFHATLeQhowVmeda7p+RwpJogIxFIiJURozlmqlyhZQEgf",
	"YcQxjViKGAU0wwIixCjC6OPH89eIiGu6AAocS4g613QTC4yFa2AuE0pYiKXdwbqAb+0IWsbAQWPRVJCI",
	"WZ5EWrhCbkwjpPZSSOCa/y9siSRDCRES4SRBBRsxuaaxlJmYdLsRC0UnJSFngs1lJ2RpF2iQi26YkC5W",
	"29O1vvXjHYHlS/1TECYkSLAEIb/D94Xz3SpGtyWTg4YClDVCrrbW7UVmO271djy80/Wt20M1zb24YnmI",
	"6aUl80ZzdMXCfFZCuCVRG9T5awWpOu0/ADOCcXQ0G4QBng1GwWjUHwbHvXAcHPYHw94hHPWOYeBCJ4Fi",
	"Kh/ApUCYSfuhsuYyJzRCRBbeol0UfWBc4mQfuylsRpI7CCLCIZSMr7rznEY4BSpxIlqjQcyWgWSBYh0Y",
	"yA0ljcMXMB/PDoN+OJwHowj3Anw4GAS9We+wNxgeRy+iFzsD3UZj7b1tWWDFK3dErm2RsR649okEDbwV",
	"Ai4IpyppEnCuDQAnycXcm3z65v0Xh7k38b7rbpKqrk0buhd68SXMgQMNwVv7LdBRHWx/MAR13AdwdDwL",
	"+oNoGODR+DAYDQ4Px+PRqNfr9TzfmzOeYulNvDzXytwhWOQQ6GYj0juQOMISP6VgTEgOcBuyNCXS6TLf",
	"x1jEPxSeM8tJIpGd7nC/DIef8cLQbqamesTEXULDJI8IXaD3Z79dnniVfOkheSyNUhGtbGr9kP4uzXH1",
	"lOoLcyFZSu5xeUo/RO+0PnvtexFRqpvlspWo8BiS4MilYmP/9uw11rmP7s7VskIFLsVVTbGGq8XyQSvd",
	"+P2TOZ/mLkq6O6W0ENyBw9LZIkNrP+tQquZdSf4zJuSCg3hk4l8Jtrvkmlbnrn0vF7YO3GvvPwrg+ziL",
	"751xzviTegiLwKkNNQlXcghH7oOFUczDYVNzKKc3CLu3WUv5ljwmFujZDtss1L/XPhjt7nI+Q8qN/M3p",
	"hz9RGFzFYLJ5yVAuAM0Zt+lPxri0ybKuHyOk3DmXgM7oglCbIXWu6VWZLWlCjVpCVZ02Q3pz+gFlnCno",
	"PlrGJIxVDZELiK5pwfdiammZfEuzN1g6SBUeTCKRQUjmRGGzRcY1PQhNqOEBzkhwnfd6w1CdsPoTHCBj",
	"KAU7hEUlx1OoH1OEbIrItiqViGa8kkqWMi1JkijVlMqVrKpfVUVZfeo2SKlKrL6TSFMvkq0OmgKgIssM",
	"E5ZHnQVjiwR0jikk43gBOv3slqWGrd6qSvQ1xDRPJAks8mI6ChMmQEgFU00yad81/d5WFVPDA73Kw88g",
	"y2U/KDWHMRNAEc4lS7EkIU6SVVPJkD+isdIo91TKwOaFXrTcqJiu8GoqdUt2ma82z841PcNhXBiJ1nrI",
	"qMREVayFpniR8Fg2SCHvoN80ApPWCYQ5TK4pQgE6UPF48g1STBISrQ8m6IQi/Q3hKOIglAliiThkHISK",
	"CRteoSKBGmJ10M+MI6s9Hx3ghITwk/2u9vygYzkL4HckhBOz7pEYDGtLYhvvdBUwGWtvy37CWSYyJjsL",
	"u6hYU4WkS4XHasPKX/QdFK6GCqKUUOHUQcRSTOjkm/lfMdTuiaY5kYDMr+j7jJMU89UPbeZJYhjqhok6",
	"Wc3uY2nXNjWycb0DxDg6aGBye93DpkmEWWOCgzJUhOnqmhb6rXvTJ50ATFpWoUq4uj3su3me75lta6vZ",
	"8z2r4OqPj0h1XIlGeZA9XZ3oe/a8uW2Wa1iEQCNMZTDjmETBsDcc94c7C7IKOX9X2VlLr9t9VB7GREIo",
	"c94Q5+vR4e3haHueb37eI+m9WmWgawpT0u1aczG9UrO0xBkTRDLeTGkeWn5ZLFq5MltznN+ybK+yqJ7Q",
	"tFrBVdXVtNKA3mJ7U2zLNhN7dEnxm76v2Ai4H4GanTfFK8qROlbDSBkKzVM9LQ9DEErIOSaJUUUGVJXQ",
	"nu+pqtx+NMjM56Ltqb7dOCysYjcVVnip2CzCzPM93bZSgSdaQFBW/foboULiJAHuJF0k13WFfybUnesX",
	"11N2gFAJC1OyFFdF7RHJJE5cQw0Na6Z+ea9lrpPMYn9rru171kEctwrzdqXePeoaR+4q3bi8eeuFQJtx",
	"o6ZqIYgthHbEcCt3i9bb3Se/0JXm4FJKswHjDHROEJCxLSNFiHek3glg4R4TZJFG421DFBeBdsvJ5Bi4",
	"Ay7IPvWmjT0a9mbZBq5vlFBiVK5dCZctlc2wAGsdG6MqU/2IdjhEMTbNZJWoApXdiAjZVYZ3tLE8RYeJ",
	"LhPdWueRJy5zTEHihNDPbq4pUYWq6MwhYhzbY7DD+KJbrPtRhd6XZjwYDlTlNThUcr8sD7SdEDSTxAaK",
	"OogSgxruhEAlE5r/j1bLL48CdczhtMIZq38PR+YXje8VFnAx3QMLj0Va2fkZYwlg2r4TVNNcfjFttHIa",
	"ThFKcmdaEp9h1b7ihZCDDNRQBWmGhVgyHrngqq2+ddpM22T2kJ5QQRZx40pb8hz8lkJ8j/EFprZDVuc/",
	"6I16w4Ezl1H5JvA25GoLrKO0W0G+Mz2rIfGbWq4xraisIq5rJ1vdFUZhj/aQ69nB2t+5pnmHvWtJq/2z",
	"k0f7Kln3kR7OvdmfEb9IdPaXfs8VzZLhEbIXK5Tom6Rtv+SK55Ruy6D2yc4NApueu7M/vzhUqqlrdV0r",
	"PcNL0RHDRp7mQqhbv0/Yz9VFYr1O2LizHnQ+oGlWCK04KEQcQDQYj/vH6OTk5OR0+P4en/aT/3t93n9/",
	"dTZWv52/52/+54y/+1/y3+/efVzmv+DLk1/Ty7fs/P5yPvjyehC9Ht/3Xl197R5+dYFoF5Oqit79FGRL",
	"0Xejnx5BmHMiV1OlQaOiV4C5UfpMf/q5CL+//n5VvGTSQdXMK+mq+G3eMxE6Z+022NS2aSTT13C2XWrS",
	"cNNFEB3P9xISAjVpk31CdZLhMAY06PQ8m4iWJ/1yuexgPayPV7tWdN+en569n54Fg06vE8s00XtIpFba",
	"xfSVZm8vfDjS/UiEM1LJhybewHb5qRqYeMNOr9PXebiMtZq6tourww8TjtvHUw5YAsKIwhLZ2T7KmEqB",
	"CE6SFQoZFURIQhf6yQHcAceFLrR6bGNZP0QzjU3CUQRqiW2SVm8MziNv4n1gQlrRPGMHIOQrFq3MdYZO",
	"wLRHZVlCTBO0+4e9qdi8UnvwHrB+H7mu25s6eM3Tj4ypvVDUBr3+U3M/jwzjhsrNIIqxQEJiLiFS2zjq",
	"9Z6Mv70EafM+p6bBa3e6eF5k+Pf/ev4nuVRG8hkoIgIRg8ZwH/713D9SnMuYcXJvrgoy4CpvQ6VxGiSj",
	"vwPJZ8qWtNwHo4Tx32ECHyl8zSCUECFQcxALw5wrt6jGWn2MFVH20836xvdEnqZYVVdF0CiCi1pXRJru",
	"NxKt9SEGjmjzBqS5+NBnsoonGNmzHzGuCSagkFlq+vJGG0qY5BEItIxBxsDVZMoMrUKFOsOACKJ2uHkD",
	"sn5z7tde+n5yv2IqCRuwkiElk31Bq0Ls5gGtfcZTDS/V57RP/qjlphW7ek8du8peWsuA6nr5x0JXETee",
	"o9Zz1Noral01As/W8KU7MEXv7cE4Vkw0BOeEEhE3ohcg+IpDiVS+qZyaMIo4yJxTiFAEqgYSiNHqY9/i",
	"JbG5EH0gmpU9wud4tjOebR60tY3rqrqVxcMJ81i72MrnMPcc5v4dYa4Vm5RB44ohq3CniYtKfGuFmM37",
	"rVZwcUm2mdLVt0DbGkeVefqa6C91/Y0MLms3z2TZHFllPLvZP+NmxtD/fU6GSwPCSYIyJgSZJVBa08bN",
	"dtdEmJomEw3LPzUxyDZP82YrpI9Ot6PulwGUdP/sqT/8m8/wciufffTZRx/jo2ZtlbT2y7Jluv38u7BT",
	"3FZdB2vJaW9FhCKlA/uC8d+YOTwozrq8ajRxpt7rxhnpqOUiJvZvs3BGiuKKd+8GXhP3O/tukEV5aB67",
	"Guo6g2gTFxIv4JEsphIvCF20Ce9cqTVIiyeK3vpm/f8BAAD///3dbbgyPgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
