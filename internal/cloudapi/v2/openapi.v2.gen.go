// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesDiskRaw ImageTypes = "disk-raw"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIsoLive ImageTypes = "iso-live"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`
	Files              *[]File             `json:"files,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap           *OpenSCAP           `json:"openscap,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
