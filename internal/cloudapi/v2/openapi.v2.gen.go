// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name string `json:"name"`

	// Tag for the created container image
	Tag string `json:"tag"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`
	Packages   *[]string     `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
