// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeList defines model for ComposeList.
type ComposeList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []ComposeStatus `json:"items"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The list of composes
	// (GET /composes/)
	GetComposeList(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeList converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeList(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/", wrapper.GetComposeList)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wcAAP//wWtz++zNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
