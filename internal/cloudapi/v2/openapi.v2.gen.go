// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotQcow2Image ImageTypes = "iot-qcow2-image"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name   *string `json:"name,omitempty"`
	Source string  `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`
	Files              *[]File             `json:"files,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
