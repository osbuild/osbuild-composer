// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string `json:"installation_device,omitempty"`
	Kernel             *Kernel `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *Services     `json:"services,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiunPubKeyHash         *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure     *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts    *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl *string `json:"manufacturing_server_url,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *struct {
		// List of services to disable
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e3PiONY4/FVUPG9VuivcLwlJ1dQ+hJCEBHKDXJeurLCFrWBLjiRDyFR/97ck2cYG",
	"E6C7Z/bZ/fX8MR1s6ejoSOfoXOU/MwZ1PUoQETxz+GfGgwy6SCAW/LKQ/NdE3GDYE5iSzGHmGloIYGKi",
	"90w2g96h6zko0XwCHR9lDjOlzPfv2QyWfd58xGaZbIZAV75RLbMZbtjIhbKLmHnyORcME0t14/gjZexL",
	"3x0iBugIYIFcDjABCBo2CADGsQkBRNgUiyvxUW0/w+d7+FKBbjz0Ws1y06EENSX5uBoImiaWaELnmlEP",
	"MYElIiPocJTNeLFHf2YYstR8lgbKZrgNGXqZYmG/QMOgfrAwwcwyh//MlMqVam1vv35QLJUz37IZRYlU",
	"WMEDyBicqbkz9OZjhkwJJsDhW9SMDl+RIWQ/Pb87z6HQvFKk5z88wQjxDPJzU8RFrpTJ/p3TzmY4gR63",
	"qXjRqx3HyZ3lwrfLWKUTLB3XdWTsCSh8zSUJQkEXJzGCLs4VjXqluH9Q2d+v1Q5qZnWYRrEtSbwwGTlu",
	"ds0e6FV+Zgt4/tDBhmbhEfQdEbVLsnR7BDgSQFCgXoMvwkYg6AIU837NAggcSqwsoMORzw0okAnubjsD",
	"gjlgSPiMIDMP2oID9O5hBiVo4GLLFmCIAKeUIAaEDQkYUQaosBEDvprbgAjILCR4fkAGZI6LYD6Sw3Kb",
	"MoGYHA3EBgOQmAOCkwNiDiTuHLoIQK6Gkr/jw4H5aPMlGlLqIEh+flE3W85VW9FnTroojg8hG6XC//AZ",
	"+pntgl1ooYhDF6S+pCgdKWpqOiITqA5y0YHrc7XOPsFvvjyaVEMLTxABDHHqMwMBi1Hfy6slloPIxaIu",
	"FnInjRh1VRc5UcSFXHcGiUldQAkCQ8iRCSgBENzdtY8B5gNiIYKY3IZ6IRMCRSGWxrEONaAIljc5wU7w",
	"Jpykx+gEy0mG6L8o9LNgaiOGVBM1ityevmOqyYd0gUR2szAXiCn8zuhU7mgHcwGg44AQDX44ILYQHj8s",
	"FExq8LyLDUY5HYm8Qd0CIjmfFwwHF6Bc20Ig6v4xwWj6h3qUMxycc6BAXPwP/Ahl4Ysc6CUaZEeRXGIc",
	"PpKkJ1QA7iEDjzAyswAL+dBEpm8kFmQFHRaJLtkD+XI7pQvKeN/Pd1dyu2xA7kVU+tQ3ILkNwJyqEdOO",
	"O38YofCCzWWk2scSpXizH0CmimpmfVg2cnBYruaq1VIld1A0arm9UrlS3EP14gEqp2EnEIFEfIKXREI3",
	"2gyrYAuOMDHVWmsOVTIDXFMmoLPJXgz3ocATlDMxQ4agbFYY+cSELiICOnzpbc6m05ygOTl0TqO8QKSa",
	"sY9GteFermRURrmqCYs5uFcu54rD4l6xXDkw9839tZJ3TrHltV3agWvk5yr5nJSQm4icBSRjANJQiOuz",
	"R9ScyVEoQVejzOE//8z8fwyNMoeZ/ynMDYZCoBIXUvTh798WIN4i7lESaMqOswHUK4XZLRohhoiBMt+z",
	"SxQxk5QolStI6og5VD8Y5kpls5KD1dperlre26vVqtVisVjMZDMjylwoMocZ31fLs4ZqZgq1otnNF+vH",
	"J/VZ+8SW0MNqerbN/yJK6il1qMV/6aTUfh/62DH17wWLIUAhm3nPWTQXPMREIDaCBvrze5otMaavSmH/",
	"DLML+orVXNIZMEDoU1J0IcEjxMUvpYcbB/rzxFiY3Bz65zNDAppQwF85McoFQ+jFoK6LReqZ9cWG3P4a",
	"Hl1yBQQImqecfx40xtDSsBd9H+qNVqYwMRzfxMQCl63720YmZpN+Np8ARkSINMKupt+t1lG31K4Nnwvq",
	"4g8YqeafYdhMtv6ezZhYUmfoiyXrhNnIydXTqKh3O5vj+9mQbdk4nNti5+SG3QbMj7Lv0u5OECC2HL9C",
	"/qdJLR7BXTvd8HDIJrqiLYk2h5JGsw3xkaSbA9qsT4KQ98pZt0j8AFBygp+LGQ2uxRhly5qUiQTEjvxT",
	"Es2MSUEp8CzEtNkAeaqPbvlUixovIaDnIxmG+K6aim8YiMu5jCB2fCa1Ng8RKUXkhOZ8NW+4xFhNSgTE",
	"BKXM7BP7WVDgcxR5JYwQyNzaWmm4au11GW60jZXHJAFUUIDcITITqrY2S9ksHzxSur0a9VBAK9UScfjL",
	"BDE8mi2PLsnAqAP6nR5QbfAIBwZ2bFDlyFnytCxuMD3BVK04nNLPODc+WZZoPRhSbq05CRVhFowVypX2",
	"kEoqaC0P0YfWliNoez5Vl1tHm5gs3Jw0JraC4yGJ+bF6Hp7YoXKx5AWaT4aSwILXeyzuYJsTKfBxJYc6",
	"uTm+THcvLdDmzYezPKYFdxb4OgrBehx+QrVF71k2nHLqblMn7y3yKMfSfF3m8CHkKJhFJNznGIY2tGGS",
	"PEOmDbX9LKmEiCjIU6wgT+x6oV54r++97FULEiDlBcoLCYWe4dRNtnA2GDYyxi+WZ8XkZMydqV8z5NHV",
	"bRCBQweZ6S9H2EEh8ywhY3nWGM3SlNnVCCek/byZiwR0MBmnU9PF8hzh+REyKYMeo3K58pRZhbDfP+Qc",
	"/9Dvc5XywC8Wy3uQGfYfmsobkFYPIhXLZSQiHOTrvIGIoFyN/w+GHAQ5+qOekzowdGMjQ/n/vap+ovA7",
	"ghxd9TbAZSXJPYYpw2KWfmRy7sSk9RqZm2oNhhwQ11S3UXNDabC58jM/TNO2t0JGbWDFjzjNJmi9CwZB",
	"vI0SuaERMfdzAkxAUhHPg76NOBqQRO8pdhzlQOPIlAepiTxOnQkKXLuCYTRBEfw8aEQEcmbZARES5Hz4",
	"EBqHk8A7jF2PMqFhS5n3rwISRmHmu3mFRt4s/AtEDrQBCQTrXCBuRtdFSZZC3nAQvIWyehwilgZwZNJ1",
	"/U+Or0LBsvmgJ9hBqeNJKDMukLsVqKBLKkCGptBx1kPR7RLcomQio76Xskk7WB+e+r1cea0ObLqc2pOd",
	"grFNuUhXb5qUjLDlM6TDYlHDZLgk9njZgrQIDi3OTw2YsJ0K73MBHUcR5MVEE2ysCSjFOwDdIQsMnzFE",
	"hDMDlDgzyYkj34k0KWRaKMex6zmKr3MBCKn2zrxFpaFgokmBmzBtgmPECFq72Be6VRBBctC69h3d6ns2",
	"Qz1EuAG9dT2uPER6zcb1ovMjFn73KBcWQ3y70LsHmVBLg4n14lITJeLBGegLmnMmbmYxKNxDDjIEsOlU",
	"EdzEfBzEF0JxFkFGZh7shIB29Htp6DA4BT5xEOdKJDIEIEMqoEcZcClDwJUqnEcxESqRZGpjwwYG5Ahg",
	"MYfTue/mwY6CDZ0pnPEBkda1fJ4FaIJUYEaJyGAIQgFSR0IMfh7sMDjdAaqnxCxCnw9IGpAVeAYRnsCY",
	"ZHCayWY0/SJSfkt1aM2kWvtvOcgUA218mg1IyGRXPYAFR85IZQTMNDBCVaQXTiB2pNoYsaRSwwGjVADK",
	"BgSSWRB3l4SO+/1M4DEqLeuvCudw4BeOBAcjjBwzhLk0HcwBtghlYaBtI8H5+QnIEZMCZy2UXthuIXa4",
	"tl+8rRwfu+iDkrUipB+2kzYT30afuuNpqlSa9Tg/yZd2YiPYXnM1ZH5ihdHDESbQAZKNRtAQekWS2iAi",
	"3GfoxYMsTG/7PBOlpdoDYUOho8+qI4hpKQC947iZF7NUVgSX1bkZ7r/5bCAHMIgxq2wEyuRvvOAuoSor",
	"aR6DW+TrZR38mzQkIjGb8Fwj5mLOJbMCDSDinTlamABqCKhOOmkgxLEp7tdq6c5yYac5yoUd6pcR/OS5",
	"KJVOd2Zilmqoc+3eSkK9mhKd/ZdCTdkjRkz/VxBzwWRRU00zWiI/469yAhvBGi7RJeG6lD1gLIUgJfVh",
	"Mx+mGi5qvgA43c+qptwJrNXNpq1apzi8Q7GykXzRpF4XjNKg0jGXFsA6s3LBQdQ+vgpUQ0DJkEKmHE9K",
	"uw0djoteLZ+8eP7wZYxmLzbkdvpixlthwpHhM7S+pdzKLwZiIl0HcyHxpUj05YMXecIg9rIyuWtpLytb",
	"Z7VElibPjwjjMOa37MOVyxvytIIOOfAcKCGj99T43F8o2Nf4jTeT8+EslEgPZHsk6/8tIl5h9Kl036tW",
	"f0y6S9Bpgj14/iOSfU4/P6RfJN3/PqF+kjDuF0LpmLykZ6jLp/F5aAiS9sOZQDyOfrlU3a/WK3vVejLq",
	"7mMi9qqKlSPNP+kTLEwgW+tsjnXOzhFOn2maN2FLGRnAWCcZPcrEJ/4J9Rp8kWYHZQIwSCzEvypbwWNU",
	"UIM6ynshLds4Lf+ZKZcPheFlspl6MfgDu9BTf26XLR5TyX9o/iEAFQNTzm25hU3M5Z8pJwWP/N/pJInD",
	"m0OJzVwghyCx3SxjXvf1o+rGyUFHQpKYCG/LEoSFzZd2Ap02r38m2Db0jTESq50+kGhpL+Vjr9+4PG7c",
	"HoOeoAxaCBgO5BwcKRD5xcze4EcuGGFlzkO6P0xamyQlEhu5Y+UmV7UFJmhS1/MFAi1iYRL4XvMD0o/S",
	"LBWghcTnKRZ2cB6fNq9BEKfIBo4NzJUJnjSwFawgNX3uGs6D9iiZohtlRA/IjqED3CwHPZwb+MVixfB9",
	"bKq/0E548gTDSTEuElhvkzE9T4dfJqWcon4fy0GN5hS6ieK+7hh9R4y6AT1ViUFESih/Y1NBDxOW86CH",
	"EIhCaw71zbxFqRUEsLneOipvtRDlPQep5sk8ZxXK9B2BcwHmUU604VCOuAgPVR2QHpAvQTpyuD31xoy6",
	"fZVkNmzKEQHQF9SFAhvQcWaLREb+FkU36QIhoIuaNwibS3wVlOROTtu+anvmB6QFDTvcJIrqQdAGwIhS",
	"kSIQDKPcqnlwrzDQygsHkKHDAQEgB3akcnD4J3IhdrD5fecQNAhQvwA0TYY416ofQx5DXKmb0ViGBAEW",
	"ppUHJ5SBgHpZsAMdbKD/jSUt7OSDkQMp2dD9tsRBDx2AWDW2O8spR1YOet7/Qs/jHhV5K+gU9omjpDTN",
	"bakRzD/Mrpd4LZDAdDHhqTQwqQsxOfxT/ysHVOwJej4WCOin4IvHsAvZ7Ovy4I6jB1Thd45YYAxAEfRd",
	"pMic9XbkwbqzgFM6132+NcOKBC0c5EYFkMwGJKTvYEHXUBtuaVdkIuUh3A+bLl4msCsOl8mcyWYCAscf",
	"/iVlf9G5++sy0NXZLOG/LGYYQ24gYkIickMGsZmrFCu1UmWtUhsDl12X0H4ammpbKA9WWtGDNu6kKaLF",
	"kjbm5kbwF+pp8F/n+MfC4uuLmhYArqXCyim3YxGzLZTXsNsa3V1ldJlaa9wkHtcK2+vIJhdDaa9t2Pkk",
	"6pCqJC6NsXWmwAhbm3jGVLvPaH0Sn9kWKKTmIl0zOsFcB8zA3W1no5SiVOzimbDbIQaZYWOBDBF4o+ZM",
	"GyWzrFB89eMNsk37M08HM3Tq9tr4ZK8vW6mpJyNYvyIGE9nxgQ+puBSNDGx6NclsZMvnwYONSFgxWowX",
	"QckOWB6sLibY9d0BMdEIE2SC4SzWTuk1ycOlWj6oHuztlw/2VjkFtLr+Qr2NcrmTltS8e1CImq5byzGV",
	"uhwMomwVpbh6DlosZQVKo5MLAfQk+YBAwJEHmRSOQWsTSYtLK7vqgMWCAzol4RB50A3gD4iJR8o1LsIx",
	"pBUxRY4j/43QCN8FMlSV3Y4xMaVmOCDc9/SJv0WsTtOqr+CuPUgTXJJggIVd+i3kxlXHKgqjBxunSUdO",
	"8K3TxIME62gbbAYgWYW00HkLRlyE8ymBwzTvJPm2yqjOZlTIV/+pkdZ/hwWyQdr1kjiLCanYUHAqh4FT",
	"nrNhjtk+Dn7F/uTQi35+aGR0rSyC3n7iTfJHrJ/KLomKU4JfYZJa8CDKOJGao3J2WUYEwJIyP9LI1L+J",
	"DpiKOXz9Yw5e/l5szOA0AufgSRIaNeSYE+5JI3z+V45OYCabmXInlcAXUebLNgeTJxc2JTihnkuT0PJd",
	"FJilKuBPqVD5vAzoVBtV9CMFm4NJ0pVMKHfFHyPKDPRZRuRqHS4YQDt3EqD1m5yJhr61WWL1RVCm8gMp",
	"5vNhT3Q2atOhvpk7gnyFh0XljyZ7lovlYvGguJ8vpnoNVEQpPVN2TF9xSpqsfGz7w00SjCEfL9oK1XKa",
	"Vj1BjC9VI1XWX5IQoD8fKljcOcQ5Vb6tWJuwUnHRPJInTlBVQlQl2lJckmim0y1XgV91UChhtgl10vZU",
	"GKtNgpQHZnqmb3CZT0qWb6AvLb8RVEAn7dUCFdSg2egWIH35ju6cXRm6zapbEpyf8Qyr9LkXDidofcyw",
	"b2MeOTGxtIzcYUJ/0e7Go7t25/ilc9VsdHqN+xZAZIIZJbocfUAmkGEdAdB+Wb35YpEBDidS09fFM+qE",
	"V849x5nlgURBXXEitS8TTZBDPQlYeY8pcWZZ7bPVzot5TpQWQWzFJSMLaxGjyUqaoy3NSd1pjTE5RjMV",
	"SV+Wqj2p1WmRqpsAB86onwxY+qmlUQ4klp9euhn6MXUOpToihlH2Z+gmUlaqvvUDGdRFHAR+q6y6i0Ga",
	"U0S9V/5HwJFBiQmDapOYgwiRl7te/q5/kqv/XHwkm7lqtrfb86sh/CU3vwS22eGfKbn4iIhUK7eh7tNR",
	"cYkswOrSnWzEbHK3j5AwbMkYAZQ8aLueg1Hgu/yXz5x/yQ7S9gpsg+yA6EBHIn1eGS5Bpa3imXx6YZBO",
	"CUhJUIBEwkJYJRPCoGgYfAnW+hAUy3vF6rBswj10UKsOzUp1WB/Wy7BeqaEa3N83y8O94mgEv2Z1IHvI",
	"IDHsnIPHCLCofm4Oj9nImRfnSGXv64Ivf7lF+sE+Wi7U3aCbzd31wvEYCcRcaeqBqY0C0ugAQeLKEhcS",
	"aCEGvhiQmA7yMPkKsImIwGKmr1PS+wsIqpyt2jmtXoQWex40KeG+ixgw5OZSNX6LRRKQA8PBkjWTbWxE",
	"BiTaS9E+kFIz3FgrLmLaPF9mMZlriRHsYCmWfSbpJ++KIzmt7DQ4SNUIqbwZ5nUvIeUxOsIOWpU4JiB2",
	"qPqxYeZ4P+qQ4rENR/oMxX58xCSuXCWDaxff5hFun/xIv7QVXizYX77EjRnpCV7IoyverKywiinky5o3",
	"tlyztuoVgWJV+ljol1t6EVOi11xwox0bKzXlrCZChKO02q99x9Onw0+F8yFH6VlIR8EbrR9FBfqBOjUX",
	"IeniMV5iuVjWHL6TSoLW1fVNbspZGZ4Bgq62jl6CUJsE/rnJs0DnaLZpvLJI0FXnuSq43OhQj1qmDXe7",
	"GY0Sal5+QBoCyD2h1ajAON4JylZ3smBnXsmofgUVlDtgPgcVFx6QIZpH8VRKgqqG0BBdrX8lg3yUmTp2",
	"7DFkIFOdrFiXf0S38slx5YkxpBOUlqcYq6/9+8pqty6jXZfvKO0ADizPCirjk9fLzTd/dCauOAbnJbYL",
	"EbHrU6mdR0UdUvzMC0VUEkryFE9oMDn531HrtH0Jrk+vwfXdUafdBBetJ3DUuWpeqNcDMiDuTfvy6LRh",
	"9Ax61Gocd0b1p7Mx+jjfg6bTfZruw9PTtnMOHVE/fy2/F47KF7t2e9T230+Fd/+6jwakc2sd3+3vvcJ+",
	"zbs/rrkn3fOKN0YE3RaMvvv2djO+nN1w+7FMbx6nrY+73rDUvOw2R81Ta/xYvykPyMfzmLWNJjsp3pSn",
	"7GLoQN+073bxPSSNY+6W6k+tNz6sNe4q+6a4Y93KzZP5YB3c7j7i69F9/XZALo5e+8XK5P7oyuz2+FPl",
	"oAObZK/tla4mXr3dooU2at0/ld7c5tV1A14Uh+dnFX9kVZs+GvPdfm9ApjcPfdTsvPvPnb2r7iO9ur6Y",
	"Tro3o/ehVXo8rk/85+KFeC0Yl2fld+gX313e8A/Ozj00nlxd3747AzJ7E6+z5xGj9xidzLzpszW5mQpC",
	"uvWC1Wv5hfP7Pnsq1spu666/3zSG+9WxcXbSPxl1xw4ZnxYGpDi6qzZuYa1YPau8vxbHYogqkwvj+pFe",
	"X/kXR/f8rDcpFu9Onxqza+TPduv7xl3hqWV398eV3v3F64DsofazNcPdq+LUKT2dHt9eGL4zHfODxq7v",
	"jK0S7Q+rvPLhPk+ui/untP/+UC2/wovaQ2/30n5GaEDqe8VHem8PjdKF19t9HT3TV85a4rl+Pbx73n2a",
	"nNRvPWY+NNjr2fB8XD73bi8a7337nd80+JF9WhqQYsd/Lz/A7lHRKrdr10bXPC8Yb6+0WDcM9nr06OP3",
	"B4Zr2D/oPnr1t35h1Pu4dLnZtki98PZ8MSC4fuM7I39/33+zHwpTUR4KgoV1y99e7feu//p0V30eVu2x",
	"OKnbF3eFx8f9avnN7tQupo3bxk3jaEDE8cnp88PtxHBb1sVxt3TRa9Sf3fvxsHJud/rdUufxaAYfSrZB",
	"nEb43Dg7n0D3/tVs1iYDYrjGLr45vzo66h41G43qCW610Nmey+yTs33/nt90ut1y8almPNvk/al+0nAV",
	"DzVPp/WT5nTcHpCjafv05IaeNxu8eXT01GxMW80zq9U8qTYaTWt8M++9e/nUKOwfPXmWM+s1np/O7NfZ",
	"hT0ghd3R3sf16H4yPCsXW2+VcXv/6uToskg6j7tHdyXXn/R23/p+r/LQYUcVt3LqO8K7uG2dX3SEW2sd",
	"D0iJnX48Nmi/NPMOntr1TuPY7DabV7PXxiunD3f1/ac7v7lbGJJX1ke35c7tVXM0u27u7z0c1Gv46n5A",
	"3Fpvd8hvjqf7zXKHOWajW+0e+3T2XOphcQqfqxc3nXux22/BUhXzp95p8/WD7l8/1e8r51fjWnFArLcH",
	"q16+LAzdcuujt9+vVx5ax8OSM3mttp3Ju9V+u0BWqfTx+PTusqfe8/l5czT5GO06l709/906G5DX98J5",
	"ceY8lzt4eMr2ThuN2dXB3QNrPPemvW6xZbz269NWk7yPe8f+7M19mN5PLo8e/Vb7vn6FKk8D0sV3pdH5",
	"ZZ2b+8ceP3mvdXcfTdIlN73dM/bav744rrgPzGmYpNW3zaf7+uvz2Huwj2e8Ujg4QFcDYo+LrENmxdfL",
	"6Rj6owK+q18Ze4+T7vi1c9s9t2p3B/cXs3P/4UF8TB/Ja/ey9nB7cvR2UeXP1O12B2Qkhv2z0m5tNrx9",
	"KDQqk6MhfL99KIv9u4/LV+MDjXvPLQw7lwedwplx3mzflm5O6nv18rHZcFonB+aAjMvWDX7q3TQgPC+e",
	"nzc+zia349vzTse6KD/dPOGzy/tZWVTOZycjzqBbm/aaD1cj+xq1Z52j/vP5gEyYd+lcD9GI9w9q+/1R",
	"+eiy7Vsfz6xZu38/7l2Mn61bu3R/Oum1b0hz9jG+me217spv1x5+qB1IGWVftx+f2QU1LioXnd5BAX+c",
	"3/RvHfHabfwxIH9cj/r7A6JOl9bl8WdHz4piZMrQC+dO+iH9+wqJtDvUVF1lauBE6ulBI6CLL5V/JKab",
	"QC7VCg6Urh1L2VM1nQPyxcMecjBBX1PrO5eStsKbc+iWNcy/1iWS9HqAFU6PdL/tkobe2zRX/RfknIPh",
	"LLyWOx5Pn++y8O4CM31rkrbuUvolyehrsSEjoZTgLZFJpfJCwe2C8W8IPNHFcoGqnLxeHhkMiZx8FWMa",
	"D3I+pSyVVNJyeEk1QZYtkA0YEROOLXvhOv1V1U2UWZDECkDiMcFqsVKupvsMN7jm/SpIkQMjB1phCjyz",
	"DflnGI3XIRJVMBNmrUOH06DuPlh5DtrBjBY4fNWckhVw8RvW5sual0weI+xaui7Y0Qm6ZRf3RAKH2ALH",
	"FifN/u7HirW3iL6E3dbEX4jwNFafxEqI8EDYKCFLi3lCmbBz0EUMGzDvUerkifDkiZLJZkqfvd5K+MYL",
	"1lfH3sNW2VAmKElx128mzM67XqEF5T4jm0Xhl71WZLbxbciLeVdr+yx+bWFdl6UqmbVjLF/Rv67Lisvv",
	"1nVLCdSu67IU5VrXYZVz8fu3dMkT6hf6swDLSWmqGgTz8P5yhqCj761QxYVg6AuwvEg6x09FBiW/DEjK",
	"2us4LnARJEH0CjoOSGkI9M7jAwIZ0oJP6w9L48KobSAlJ5iqG+i0F0wiPCDMd5C+l4OhEWUoC6YI2HAS",
	"1R+p3QxU6Yyc3RABOIVhmay6kZ/siAHxKOc4CCu7+F0FT1woDFu744L1AIJaSuuRQjninVUOylju4jY3",
	"jC+kj23MUhv2WMx/34KhNuyRfmHixryxYfsVbmJVObx9vl+UMbhJcm+QQamze1fd4hrEEsJN8G1hu2yZ",
	"4cd8Qlal8SUSOpd24dYT+snc2/SQygLIbysPotXpiHleifIAw6zDeE4fNXA+EBi6jkwS0He8fJB9nUq6",
	"oEx7m9qJ6O6xFH1cvSxtcqfkkhbNuZ1DZrlWKx2ARqPRaFYuP2Cz5Dwft0uX/VZNPmtfstOLFus+4d1u",
	"927qn8Hbxrl726Htj9tR+e24bB7XPopH/ffC3vtn+X3xBBPESj9aiaHUTsNnWMx6cjNoAh0hyDRVh+qv",
	"k1DFPH/oh58fU8qrbhdBlbq//ggZJiOaljCjS8gEDUxglRakM1t0pjnPq9RNAwVfYAi+e9bwoGEjUFaJ",
	"fkpBjhwW0+k0D9Vr5SUI+vJCp91sXfZauXK+mLeF62glTSiSXfWO1PBBrjIDqlYSQA/HYoaHmXJ4NZl8",
	"cZip5Iv5UkZfNaDIVDAcShAv/InN72pfpVXzniIdk9NSRdX1gkAUAMpUMpWDRHiRq77kGIY5VuFhr29w",
	"j5nslKlcqnmGvirIkXa7EkLIRGY+fj9K29SoxL8FkU18Re+f6V9QCeoENPKCAkvVE6tv06nwX/RpuuB6",
	"6XDHaSNn/qG6X/7Jhm/qcyXqUx1qMcrFYiybJ8jCdYKAUuE1uF5mjtCnx1+MSmo7JykTp4ncItVfOHSQ",
	"Mb88aJtoJSvMvsOmHrr01w/d8NUtGmOkvEJYI6JHr/z1o98R6AubMvyhPVEeYnJvgGhva0yqfwcmY0Kn",
	"ZGEJan/H6t8R9O6pJBGgqjAANdTVj2ZChCsuDoX3P79JHuG+60I2C+pl4kJICa9oPyk4BWP+lUiPpt12",
	"3dSFhBAQNA27ZoFH5dSxskQMSnhwaYFyiE0Qg6FwV/I+MGnU5zB1+jtmcQOHLwuua8pF+MEeLWQQF+Gn",
	"f34Nxyc/WvE9eXxKYfZ9Sd6UfvXobTNt6YOXwIZcrh8TyPy3CR02/2LFb8nzW/JsKHkCoZEmaX6V8rSF",
	"vhTScI2ilPhsykaqUgT4/zFlKUGplB2UpMtvhem32PoPVZhWyi9tCMa1phT9Jf7VwY3kSUxY/R+SIn+B",
	"7rX4Pce/W/tK+/pjypZS92Kh6fwqliFSlR/6czXpck2gd1FQl0Qm8Un5bvtm0qv6qwZI483viVNbkiVx",
	"CdknDOAEhYY/coqPMMHcjh3i4NMzHIv50a0Ly1QIwkUCAkz0HsaUADikvgg/lus74rNjXtVJ/j7k1x7y",
	"wdciU1lDboHorjgdvYoMREwAofouecN3IAsuxwJfhE19yw7iR+e9q8uv+f86RjpVF6FZYWAv3OVpbJT4",
	"8uWnvBS13ICdbtXH4LnKc48+UCWRUTZ4IM5I/MviwV0ZUWODKsaK6tWD5QvvCoECxN2xwcemdNYYJOHH",
	"p3IhuHztE1acf1H0Nz+u5cc5sVYwZWK5lxjzv5PXkuyxAdPF6qU+57moPlOy3BKf6Wsa0Ts0ROIgYor9",
	"kAlMpK9/oAlei1z/6pKdzzgjxPM3Y6xnjOijtSv4IlzKbfjit5H620j9v2akLsmmNHmngMd1iiURM/9K",
	"wpJwSZvZvElBXY6xKtMj1k7dnvGXsv58Dmm7XX8Km45AQIzfbPbvYTO90f/zmAxGGwg6DoiSzcLdNGez",
	"9R5tSHTSAzGixFCN2fwa6+EMqKMznVE39x+hoPlPnfqVv/kMX7mU6gWIP/vNxb+5eBsuRss7SHJulOSz",
	"+oS8Cpr85L5fzL9ammiAipIF0iqXIMIPofwH6iWfTud7VPWQJsW6wX3c1PQNfYl8dCVaMgUMejivviBp",
	"45EuN4Ee1t9rzynPA2K58GMAhUlZaSsLiWkCWphYnw3ABbTQTw4TfK0zuC88GmYdnG/f//8AAAD//xm5",
	"6b7/lAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
