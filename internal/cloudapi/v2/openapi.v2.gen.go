// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for AWSEC2ImageRequestImageType.
const (
	AWSEC2ImageRequestImageTypeAws AWSEC2ImageRequestImageType = "aws"

	AWSEC2ImageRequestImageTypeAwsHaRhui AWSEC2ImageRequestImageType = "aws-ha-rhui"

	AWSEC2ImageRequestImageTypeAwsRhui AWSEC2ImageRequestImageType = "aws-rhui"

	AWSEC2ImageRequestImageTypeAwsSapRhui AWSEC2ImageRequestImageType = "aws-sap-rhui"
)

// Defines values for AWSS3ImageRequestImageType.
const (
	AWSS3ImageRequestImageTypeEdgeCommit AWSS3ImageRequestImageType = "edge-commit"

	AWSS3ImageRequestImageTypeEdgeInstaller AWSS3ImageRequestImageType = "edge-installer"

	AWSS3ImageRequestImageTypeGuestImage AWSS3ImageRequestImageType = "guest-image"

	AWSS3ImageRequestImageTypeImageInstaller AWSS3ImageRequestImageType = "image-installer"

	AWSS3ImageRequestImageTypeIotCommit AWSS3ImageRequestImageType = "iot-commit"

	AWSS3ImageRequestImageTypeIotRawImage AWSS3ImageRequestImageType = "iot-raw-image"

	AWSS3ImageRequestImageTypeVsphere AWSS3ImageRequestImageType = "vsphere"
)

// Defines values for AzureImageRequestImageType.
const (
	AzureImageRequestImageTypeAzure AzureImageRequestImageType = "azure"

	AzureImageRequestImageTypeAzureRhui AzureImageRequestImageType = "azure-rhui"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ContainerImageRequestImageType.
const (
	ContainerImageRequestImageTypeEdgeContainer ContainerImageRequestImageType = "edge-container"

	ContainerImageRequestImageTypeIotContainer ContainerImageRequestImageType = "iot-container"
)

// Defines values for GCPImageRequestImageType.
const (
	GCPImageRequestImageTypeGcp GCPImageRequestImageType = "gcp"

	GCPImageRequestImageTypeGcpRhui GCPImageRequestImageType = "gcp-rhui"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2ImageRequest defines model for AWSEC2ImageRequest.
type AWSEC2ImageRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AbstractImageRequest)
	AbstractImageRequest `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageType     AWSEC2ImageRequestImageType `json:"image_type"`
	UploadOptions *AWSEC2UploadOptions        `json:"upload_options,omitempty"`
}

// AWSEC2ImageRequestImageType defines model for AWSEC2ImageRequest.ImageType.
type AWSEC2ImageRequestImageType string

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3ImageRequest defines model for AWSS3ImageRequest.
type AWSS3ImageRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AbstractImageRequest)
	AbstractImageRequest `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageType     AWSS3ImageRequestImageType `json:"image_type"`
	UploadOptions *AWSS3UploadOptions        `json:"upload_options,omitempty"`
}

// AWSS3ImageRequestImageType defines model for AWSS3ImageRequest.ImageType.
type AWSS3ImageRequestImageType string

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AbstractImageRequest defines model for AbstractImageRequest.
type AbstractImageRequest struct {
	Architecture string       `json:"architecture"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`
}

// AzureImageRequest defines model for AzureImageRequest.
type AzureImageRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AbstractImageRequest)
	AbstractImageRequest `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageType     AzureImageRequestImageType `json:"image_type"`
	UploadOptions *AzureUploadOptions        `json:"upload_options,omitempty"`
}

// AzureImageRequestImageType defines model for AzureImageRequest.ImageType.
type AzureImageRequestImageType string

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name   *string `json:"name,omitempty"`
	Source string  `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerImageRequest defines model for ContainerImageRequest.
type ContainerImageRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AbstractImageRequest)
	AbstractImageRequest `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageType     ContainerImageRequestImageType `json:"image_type"`
	UploadOptions *ContainerUploadOptions        `json:"upload_options,omitempty"`
}

// ContainerImageRequestImageType defines model for ContainerImageRequest.ImageType.
type ContainerImageRequestImageType string

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container  `json:"containers,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`
	Packages   *[]string     `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPImageRequest defines model for GCPImageRequest.
type GCPImageRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AbstractImageRequest)
	AbstractImageRequest `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageType     GCPImageRequestImageType `json:"image_type"`
	UploadOptions *GCPUploadOptions        `json:"upload_options,omitempty"`
}

// GCPImageRequestImageType defines model for GCPImageRequest.ImageType.
type GCPImageRequestImageType string

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest interface{}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//x9KMm1ObgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
