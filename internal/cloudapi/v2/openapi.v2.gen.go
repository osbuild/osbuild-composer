// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name   *string `json:"name,omitempty"`
	Source string  `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	RepoCheckGpg *bool     `json:"repo_check_gpg,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`
	Files              *[]File             `json:"files,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cL59//8BAAD//wGZi7xIegAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
