// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for AzureUploadOptionsHyperVGeneration.
const (
	AzureUploadOptionsHyperVGenerationV1 AzureUploadOptionsHyperVGeneration = "V1"

	AzureUploadOptionsHyperVGenerationV2 AzureUploadOptionsHyperVGeneration = "V2"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Choose the VM Image HyperV generation, different features on Azure are available
	// depending on the HyperV generation.
	HyperVGeneration *AzureUploadOptionsHyperVGeneration `json:"hyper_v_generation,omitempty"`

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// Choose the VM Image HyperV generation, different features on Azure are available
// depending on the HyperV generation.
type AzureUploadOptionsHyperVGeneration string

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	Cacerts *CACertsCustomization `json:"cacerts,omitempty"`

	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CACertsCustomization defines model for CACertsCustomization.
type CACertsCustomization struct {
	PemCerts []string `json:"pem_certs"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Cacerts    *CACertsCustomization `json:"cacerts,omitempty"`
	Containers *[]Container          `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    *string `json:"sigmd5,omitempty"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
