// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for AzureUploadOptionsHyperVGeneration.
const (
	AzureUploadOptionsHyperVGenerationV1 AzureUploadOptionsHyperVGeneration = "V1"

	AzureUploadOptionsHyperVGenerationV2 AzureUploadOptionsHyperVGeneration = "V2"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Choose the VM Image HyperV generation, different features on Azure are available
	// depending on the HyperV generation.
	HyperVGeneration *AzureUploadOptionsHyperVGeneration `json:"hyper_v_generation,omitempty"`

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// Choose the VM Image HyperV generation, different features on Azure are available
// depending on the HyperV generation.
type AzureUploadOptionsHyperVGeneration string

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Architecture to use for the compose. If left empty the host arch
	// will be used.
	Architecture *string `json:"architecture,omitempty"`

	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	Cacerts *CACertsCustomization `json:"cacerts,omitempty"`

	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CACertsCustomization defines model for CACertsCustomization.
type CACertsCustomization struct {
	PemCerts []string `json:"pem_certs"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Cacerts    *CACertsCustomization `json:"cacerts,omitempty"`
	Containers *[]Container          `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
