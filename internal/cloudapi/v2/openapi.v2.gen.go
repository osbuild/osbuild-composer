// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for AzureUploadOptionsHyperVGeneration.
const (
	AzureUploadOptionsHyperVGenerationV1 AzureUploadOptionsHyperVGeneration = "V1"

	AzureUploadOptionsHyperVGenerationV2 AzureUploadOptionsHyperVGeneration = "V2"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Choose the VM Image HyperV generation, different features on Azure are available
	// depending on the HyperV generation.
	HyperVGeneration *AzureUploadOptionsHyperVGeneration `json:"hyper_v_generation,omitempty"`

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// Choose the VM Image HyperV generation, different features on Azure are available
// depending on the HyperV generation.
type AzureUploadOptionsHyperVGeneration string

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Version defines model for Version.
type Version struct {
	BuildCommit *string `json:"build_commit,omitempty"`
	BuildTime   *string `json:"build_time,omitempty"`
	Version     string  `json:"version"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"b9//fwAAAP//TLFh3DPMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
