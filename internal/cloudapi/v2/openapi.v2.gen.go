// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`
	ProfileId     string                 `json:"profile_id"`
	Tailoring     *OpenSCAPTailoring     `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository     `json:"payload_repositories,omitempty"`
	Rpm                 *RPMCustomization `json:"rpm,omitempty"`
	Services            *Services         `json:"services,omitempty"`
	Subscription        *Subscription     `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`
	ProfileId     string                 `json:"profile_id"`
	Tailoring     *OpenSCAPTailoring     `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
