// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name   *string `json:"name,omitempty"`
	Source string  `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Priority     *int      `json:"priority,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`
	Files              *[]File             `json:"files,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap           *OpenSCAP           `json:"openscap,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9eXPiuNY4/FVUPG9Vz1TYl0BSNXUfICQhhCxA1qGrr7BlW2BLjiSzZKq/+1uSF2ww",
	"gcztmfvc++v5Yzq2paOjo3OOzibxR0ajjksJIoJnTv/IuJBBBwnEgicTyX91xDWGXYEpyZxm7qCJACY6",
	"WmayGbSEjmujRPM5tD2UOc2UMt+/ZzNY9nnzEFtlshkCHflFtcxmuGYhB8ouYuXK91wwTEzVjeP3lLFv",
	"PGeCGKAGwAI5HGACENQsEACMYxMCiLApFnfio9p+hM/38KMC3Xwadtrltk0JakvycTWQy6iLmMD+8AyZ",
	"CuUtWNkMtyBD3xZYWN+gplEvoH2AfOb090ypXKnWjuuNk2KpnPmazajJpsIKXkDG4EpNj6E3DzOkSzAB",
	"Dl+jZnQyRZqQ/fwpPLg2hfqtoi7/aA4Rbhnk5RaIi1wpk/07Z5bNcAJdblHxzV+zOE7OKhd+3cYqnSbp",
	"uO6j1FBA4aUQCjo4iRF0cK6oNSrF+kmlXq/VTmp6dZJGsU+SeGMyctzsnmUeVvassutNbKz5smZAzxaZ",
	"UwPaHGU3ZK9rAI4EEBSoz+AXYSEQdAFKyn7NAghsSswsoBPD4xoUSAcPg+sxwRwwJDxGkJ4HXcEBWrqY",
	"QQkaONi0BJggwCkliAFhQQIMygAVFmLAU+iPiYDMRILnx2RM1rgI5iE5LLcoE4jJ0UBsMACJPiY4OSDm",
	"QOLOoYMA5Goo+RwfDqxHW6/ChFIbQfKvr9thK7aL2zxmp+vM+BCyUSr8d4+hPRyBHWiiSM42NLAkGjUU",
	"wXxSIR2oDnJdgeNxtZQewW+e3CZUQxPPEQEMceoxDQGTUc/Nq1WUg8j1oA4WklkMRh3VRc4FcSGXlkGi",
	"UwdQgsAEcqQDSgAEDw/dM4D5mJiIICY5zV+rhFpQiKXJnU01KIIVTE7wOvgSTtJldI7lJEP0vyn0s2Bh",
	"IYZUEzWK5EDP1tXkQ7pAIruZmAvEFH6XdCGZ1sZcAGjbIESDn46JJYTLTwsFnWo872CNUU4NkdeoU0Ak",
	"5/GCZuMClMtXCBTWP+YYLX5Tr3KajXM2FIiL/4HvoUb7Jgf6Fg3yRZFcYhy+kqQnVADuIg0bGOlZgIV8",
	"qSPd0xILsoMOm0SXEoA8yU7p6i7e92PuSrLLAeTeRGVEPQ2SQQDmQo2Ytml5kwiFb1jfRqp7JlGKN/sT",
	"yFRRTW9MyloOTsrVXLVaquROilotd1wqV4rHqFE8QeU07AQikIgP8JJI+I0OwypgQQMTXa21L6FKLYA7",
	"ygS0D+HFkA8FnqOcjhnSBGWrguERHTqICGjzra85iy5ygubk0Dkf5Q0i1bQ6MmqT41xJqxi5qg6LOXhc",
	"LueKk+JxsVw50et6fa9yXVNse223OHCPitylgpMa8hCVs4FkDEAaCnHbskX1lRyFEnRrZE5//yPz/zFk",
	"ZE4z/1NYG++FwDwtpNim379uQBwg7lLiW63Qtg+AeqswGyADMUQ0lPme3aKInqREqVxB0tLLocbJJFcq",
	"65UcrNaOc9Xy8XGtVq0Wi8ViJpsxKHOgyJxmPE8tzx6q6SnUima3Xqw/P6mP2idYwh/Wp2dX/y+ipD+l",
	"a2ryHzopxe8TD9u6/7xh9wcoZDPLnElzwUtMBGIG1NAf39M8ghmdKrP7I8x6dIrVXNIFMEDoQ1L0IcEG",
	"4uKH0sOJA/3XibExuTX0j2eGBNShgD9yYpQLhtA3jToOFql71i8W5Nav4dYlV0CAoHnK/udCbQZNH/Zm",
	"HEJ98Y0pTDTb0zExwU3ncdDMxDzLj+YTwIgIkUbY3fQb+Dbq9vageVxQB7/DyMD+CIl2svX3bEbHkgAT",
	"T2z5GMxCdq6RRiifodkapY+G7MrGIfqbnZM8+Rkwf1ZCtxg4QYAYxX+Eik9TTDyCu3e6of7PJrqiTxJt",
	"DSWNZgfiI0m3BnRYnwQhH1VsbJP4AaDkBD/WJD64DmOUbUuDjgTEtvxTEk2PKTqp00zEfM8A8tR42fbG",
	"FTXeQsCfjxQY4jlqKp6mIS7nYkBse0waZi4iUlHICa3lat1wS7DalAiICUqZ2QcusqDA4yiKLWghkLVD",
	"tdM39Q3UAO4abMTFKuyRgCkoQM4E6Qlj2nc82SofvFLWuxr0VEAz1dew+bc5YthYbU9KUoFRG4yuh0C1",
	"wQYOXOjYoCoasxUu2eQvf36pdm84pa0IBdR1LB+gfRdbgiBQdfCqRMvBkIpNrUmoCLPhjlCu7INUUkFz",
	"e4gRND85gu+xp1pr+2gTU4WHk0bHZrA7JDE/U+/DPTk0H7biPOvJUBL46D6PxaNkayIFgarkUOf3Zzfp",
	"AaQN2rx5cJXHtOCsgmhGIViP0w+othkCy4ZTTuU2tfEOkEs5lg7qtoBPIEfBLCLdvsYw9JI1neQZ0i3o",
	"e8iSSoiIgtzECnLDbhQahWXj+NtxtSABUl6gvJAw2RlOZbKNrUGzkDb7ZrpmTE3GYpL+Z4ZcursNInBi",
	"Iz39o4FtFArPFjKma87QKs1c3Y1wQtmvmzlIQBuTWTo1HSy3EZ43kE4ZdBmVy5WnzCyE/f4h5/ib/z1X",
	"KY+9YrF8DJlm/eZT+QDS+oNI03EbiQgH+TmvISIoV+P/gyEbQY5+a+SklQud2MhQ/v+46r9R+LUgR7fD",
	"A3DZSXKXYcqwWKXvmJzbMW29R+em+nuhBMQN1Q1DNhT4w82b9XaZxsFqPMWjSuRwmmHfWQoGQbyN0qqh",
	"J7AOVgJMQNLUzoORhTgak0TvBbZtFQXjSJd7pY5cTu05CuKzgmE0RxH8PGhGCtVeZcdESJDr4UNoHM6D",
	"EC92XMqED1uqtX8WkNAKK8/JKzTyeuGfIIqCjUmgO9c67zC6biqrFPKGg+BPmKNnIWJpAKVGOBzUObbR",
	"TigrLpDzKVBBlxSA1EWEa9DdB+XWRWTYbt5tOpKxhKRLuTAZ4p9LRrpwJXeufwsjU2KvDufmMQktktsh",
	"wIIj21CZu5UPjFCVroFziG25M0T2i9ppAaNUAMrGBJJVkB9zIRNx510HLqPSdv5V4RwO/I0jwYGBka2H",
	"MLemgznAJqEsjJYfxBkfSwBHbI419Hm7iEf74kY6CPt2UAhYUdxvDSarMP8ZR369mRiYoQW00y1IB5Ou",
	"36W0PY3YNr0fHb/xXmyIIWQ7/klk0kzReFh933oN422lUcg/s5s88LSNJA2ntR7bIlozEK61EpZk8y30",
	"MAFiYAJtAJnABtSEz49JHkGEewx9cyELq2U+zpd3VHsgLCj8BJrqCGI6GqAljtuxMVNsR35MJbFC6VvP",
	"BnIAgzSZSqhSJp/xhj9IVXnEOo2wyQXbRoZ0sB2qpxUBIeZgzqWqAj6ASHOs0cIEUE1AGwQWUBybYr1W",
	"S4/3CSst1iescHeN4CfgqS3XWemYpXoi3Hffk1BvF8QvJkqhpuwRI6b3I4i5YZOpqaZZZVEc5UcFubRg",
	"DbfokgjNyB4wlgVNyd4eFqNRw0XNNwCnx5HUlK8Dc/ywaavWKQG9UK0cpF98Uu+Lp/ug0jFXRs9ulSNt",
	"nz+jbcK4/HYURuIfMq2CDjlwbSgho2VqDP0v1Fx7Ij+HKbJwFkpnBcorUmb/Fh2mMPpQfR1Xq39OfUnQ",
	"aZoreP9nVNeafl5Iv0h9/X1a6zxh5W+kuzD5FhZkRuiUiuVqMsflYSKOq8ogoR4RLsVkwz8vzCHbG/iJ",
	"dc6uh07D+aJ9t6cWauJpMyR2V6pA4suC5J7hqHlz1hycgaGgDJoIaDbkHLQUiPxmbVLwkAtG2JnSSQ9n",
	"SlObpASaI19UegOqxlEHbeq4nkCgQ0xMAsczPyajqFBEAdoo3VpgYQXa6qJ9B4I4TBYsLKxZ0nSX/kfS",
	"u1Cwgvq5tV+cB10jWWQU1XSNyRfNj9+zHHRxbuwVixXN87Cu/kJfQrkMhpNMLhJYf6bma12zt01KOUX/",
	"e6yKJppT6PLHHf0YfQ1GnYCeqg4yIiWUz1hX0MOSqzwYIgSi0KFNPT1vUmoGAXrus46qvClElVtBsVyy",
	"UkuFaj1b4FyAeVTVpdmUIy5CleMH3Mfkl6CgKmRPnzGjbr9KMmsW5YgA6AnqQIE1aNurTSIj7xPFv+n+",
	"S0AXNW8QNpf4KihJTk5jX8We+THpQM0KmURRPYhYARhRKlKTwTBAYp4HjwoDX7VzABk6HRMAcuCLVJ2n",
	"fyAHYhvr37+cgiYB6glAXWeIc39jZMhliKvNOBpLkyDAxrTy4JwyEFAvC75AG2vof2NJmS/5YOTAqWv6",
	"/T6Jgz90AGLX2M4qp7z4HHTd/4Wuy10q8mbQKewTR0ntw5+lRjD/sD5Q4rVBAt3BhKfSQKcOxOT0D/9f",
	"OaASTzD0sEDAfwt+cRl2IFv9uj24bfsDqvSCdDX91Yci6LtJkbXofZE755cNnNKl7mPWDGsqfeUgGRVA",
	"shqTkL5Jafpd7fCnW1yRiYIZIT8cuniZwOo63SZzJpsJCBx/+ZecMIi21h9XQ6dsZAn/22aNFOQaIjok",
	"IjdhEOu5SrFSK1X2GgoxcNl9JXmJWoftEwBMs7BAmvDYxnSilMSO7d1/fUDJwGjlIpXo90ts9sY+hyPZ",
	"Ss04GaT8AWE2f5P/Rt2DClySJtbWIYY46RJU2UD9a7gKuzgKhX7zwQUQkfv36QKQoHQiIsVhAJIlhOl1",
	"FxvT/FRNQzajQrL+nz5m/t9hFXpQ+LDFizEOiw0FF3IYuOA5C+aY5eHgKfYnh270+O4j4xekI+jWE1+S",
	"D7F+SDdRLqoAC57CJFLwAhMuoG2rF6bm+v8PAZhSJiOlof5NdMBUrOH7D2vw8nmzMYOLCNycu9IgXP+V",
	"o3OYyWZsPI+PkkbUXlD+lF6esFYR534msy1twVwL8h3Wq8o9JnuWi+Vi8aRYzxdTLTLE5r7zuJ1lndEp",
	"TkmxyteWNzkkOQ35bFMPV8vZlETlHDG+VchW2X9KJkB/PVSQKl1DXFMlTWNHtZ8pW4/cv4OCJKLqFLdC",
	"PsTnFr/lLvC7NJGSwkOokxbJDsNgSZAzTNKjcuGxy5QMceBxb38RVEA77dMGFdSg2ei8pn9M0u+c3RkV",
	"y2aCvSc1nYyISK0LaaqjW8q7zAKszndlI79PepkGEpol7fwASh50HdfGKLBA/+kx+5+yA0dC+okLZNvZ",
	"MfHd1UQGWAJzgopPlU3Lp5ev+GGvlCAcJBIWwiofBoPiVfBLsNCnoFg+LlYnZR0eo5NadaJXqpPGpFGG",
	"jUoN1WC9rpcnx0XDgL9m/WDNhEGiWTkbzxBgUZXXGh6zkL0uIZH68NcNj2y7RboKMbarSQ/oZnFnf9Dw",
	"DAnEHEwQlx50QBrfzUscnXEggSZi4BcNEt1GLpZ+p46IwGLln9zz2Q8Iqkxm38VQH0KLJA/alHDPQQxo",
	"krlUJdpmnh9yoNkYEbHRxkJkTCJeivhAuvMhY+0487fz3N02/29E5LcEwQqWYtsmTJfxHcKfVhsZiKwa",
	"IVU2w5z49kFQRg1so/To/7blHLZNG2SzrjrVXk6dKXLpji87y2RiO+P2FohNR6/t+kRgaK/vcHtSPsR2",
	"sz3nkHwTdueWlfWJEOEo7b5kLVpSwNbfJKMa2PT8pEp+TJoCSJhCnZEMoh1fgtq1L9Ltj8qZ1FNQRvUF",
	"rNdEBU/GZILWrq6K2zmUhRAdABna9IQp0/0Ai8uQhnSluDBXNTPR+Vo5rhTICZ2jtFRHrMju76ut+3Qt",
	"3b6UicqtA9M1g/LY5CnStfKKVM4OLbOus9vImNxdgBlaRWUfkn3XpSQqUptUkokNIif/a3Uuujfg7uIO",
	"3D20rrtt0Ou8gNb1bbunPo/JmDj33ZvWRVMbarTVaZ5dG42Xyxl6vzqGut1/WdThxUXXvoK2aFxNy8tC",
	"q9w7srpG11teCPdxWkdjcj0wzx7qx1M4qrmPZzXnvH9VcWeIoEFBGzlvb/ezm9U9t57L9P550Xl/GE5K",
	"7Zt+22hfmLPnxn15TN5fZ6yrtdl58b68YL2JDT3dejjCj5A0z7hTarx03vik1nyo1HXxwPqV+xf9yTwZ",
	"HD3jO+OxMRiTXms6Klbmj61bvT/kL5WTa9gmx123dDt3G90OLXRR5/Gl9Oa0b++asFecXF1WPMOstj00",
	"40ej4Zgs7p9GqH299F6vj2/7z/T2rreY9++N5cQsPZ815t5rsSemBe3msryEXnHp8KZ3cnnlotn89m6w",
	"tMdk9Samq1eD0UeMzlfu4tWc3y8EIf1GwRx2vMLV44i9FGtlp/Mwqre1Sb060y7PR+dGf2aT2UVhTIrG",
	"Q7U5gLVi9bKynBZnYoIq855290zvbr1e65FfDufF4sPFS3N1h7zVUaOuPRReOla/PqsMH3vTMTlG3Vdz",
	"hfu3xYVderk4G/Q0z17M+EnzyLNnZomOJlVeeXde53fF+gUdLZ+q5Sns1Z6GRzfWK0Jj0jguPtNHa6KV",
	"eu7waGq80ilnHfHauJs8vB69zM8bA5fpT002vZxczcpX7qDXXI6sJb9v8pZ1URqT4rW3LD/Bfqtolru1",
	"O62vXxW0tyktNjSNTVvPHl4+MVzD3kn/2W28jQrG8P3G4XrXJI3C22tvTHDj3rMNr1733qynwkKUJ4Jg",
	"YQ7429Ra9r3py0P1dVK1ZuK8YfUeCs/P9Wr5zbqu9RbNQfO+2RoTcXZ+8fo0mGtOx+yd9Uu9YbPx6jzO",
	"JpUr63rUL10/t1bwqWRpxG6G77XLqzl0Hqd6uzYfE83RjvD91W2r1W+1m83qOe500OWxw6zzy7r3yO+v",
	"+/1y8aWmvVpk+dI4bzpKhtoXi8Z5ezHrjklr0b04v6dX7SZvt1ov7eai0740O+3zarPZNmf3695HNy/N",
	"Qr314pr2ath8fbm0pqueNSaFI+P4/c54nE8uy8XOW2XWrd+et26K5Pr5qPVQcrz58Oht5A0rT9esVXEq",
	"F54t3N6gc9W7Fk6tczYmJXbx/tyko9LKPXnpNq6bZ3q/3b5dTZtTTp8eGvWXB699VJiQKRuhQfl6cNs2",
	"Vnft+vHTSaOGbx/HxKkNjyb8/mxRb5evma03+9X+mUdXr6UhFhfwtdq7v34UR6MOLFUxfxletKfvtH73",
	"0nisXN3OasUxMd+ezEb5pjBxyp33YX3UqDx1ziYlez6tdu350uy+9ZBZKr0/vywd9jJ8vbpqG/N348i+",
	"GR57S/NyTKbLwlVxZb+Wr/Hkgh1fNJur25OHJ9Z8HS6G/WJHm44ai06bLGfDM2/15jwtHuc3rWev031s",
	"3KLKy5j08UPJuLppcL1+5vLzZa1/9KyTPrkfHl2y6eiud1Zxnpjd1ElnZOkvj43p68x9ss5WvFI4OUG3",
	"Y2LNiuyarIrTm8UMekYBPzRutePneX82vR70r8zaw8ljb3XlPT2J98UzmfZvak+D89Zbr8pfqdPvj4kh",
	"JqPL0lFtNRk8FZqVeWsCl4Onsqg/vN9MtXc0G752MLy+ObkuXGpX7e6gdH/eOG6Uz/Sm3Tk/0cdkVjbv",
	"8cvwvgnhVfHqqvl+OR/MBlfX12av/HL/gi9vHldlUblanRucQae2GLafbg3rDnVX163R69WYzJl7Y99N",
	"kMFHJ7X6yCi3brqe+f7K2rXH5dmwN3s1B1bp8WI+7N6T9up9dr867jyU3+5c/FQ7kTrKuus+v7Ie1XqV",
	"3vXwpIDfr+5HA1tM+83fxuS3O2NUHxO1u3Ruzj7aelIDpKo48Bvndvom/bOOPO2opKq8TE1YS4cnaAT8",
	"8kzlfsZsE8ilWcEBVrnDdV5LVX2OyS8udpGNCfo1tQJ0K7MRHp+hnyyv/bEeZ9KpBDt8ykzquaUtz2a4",
	"Ufq44dZoAs/9UqfAiEveUoQ0hkROfootpws5X1CWWiUqbdpvqcbxtm18AItgwrFpbdzKtKt0hzITkqAg",
	"eTPsWC1WytX0YMEBVwn5qQBoA8OGZljBwCxN/hlGqv3MtaonCYsOoM0pgPYCrnhQ9MpBN5jRBu/tmpMf",
	"U9ymaJxh8pL9YoTdS9cNxy9Bt+wmTyRwiC1wbHHSPOrtA3FkdfB1EBsJmOzePpuXRu3rslVHs3eM7WuI",
	"9nXZcTbw+9fsVj0H5uHdJwxB2y+XV0VPYOIJsD0/qSKgUhpIAGqMSQrZ8kDBdRAkQcQR2jZIaQj8ReNj",
	"Iv1lxbO+UtoaF0ZtAwafY6rOtvmutUR4TJhnI/84AEMGZSgLFghYcB5V/ihGAKpoRc5uggBcwLB8T93m",
	"Q76IMXEp53jiFyM6eKkCXg4UmuX7+AGVgaCmUqVSniK22xXmjuX/PnM7STILdjg3HthjM/P8CV48sEf6",
	"UUxVavj5PGCUSTwkE+x3DFLBu85tB5GncHW+bqzjJzOKzCNkV9owjk5a3jDPK1HCLkwPrpNvqRB52kFr",
	"Vc/AdxzDVB9Lhxyg3NqTObdySC/XaqUT0Gw2m+3KzTtsl+zXs27pZtSpyXfdG3bR67D+Cz7q9x8W3iUc",
	"NK+cwTXtvg+M8ttZWT+rvRdbo2XhePnR8b71qB5HbH/6a0clgtrENI9hsRpKpvAJ1EKQ+YSbqL/Oww3r",
	"6mkU3myptkK/XQRVWhL+/ZaYGHTbahwG9USCBqaequvzs55+uQvPq2SohoILhYIrNZsu1CwEyiozqbbb",
	"yDBfLBZ5qD4razjoywvX3XbnZtjJlfPFvCUcW60gFopkt8OWGj7I3jOgCucAdHEstnqaKYenw+SH00wl",
	"X8yXMn5VriJTQbMpQbzwB9a/K75KK+28QH7Zsy9PqsgTBEIAKANSKm0kwlPL/oF+lQWSmKk6QMyDC0li",
	"pillqipoXb6oKsKlfarED+lIz8dr5bu6j0r8aqNs4oLW39MvBAvu/vKRFxSYqrhUXXuqanejW0+DqxRC",
	"jvNNpvUdqD/8BqKv6vYtdfOUWoxysRhLCiqbxnXtIHBamAZHDdYIfaiRY1RS7JykTJwmkkWqP3DooIZk",
	"e9Au8ff9gDMA1v2hS3/90E1PFZzPkPJ+sI+IP3rlrx/9gUBPWJThd9/jchGTvAEi3vYxqf4dmMwIXZCN",
	"Jaj9Hav/QNDSReoORVWXBKimeUxKWlyFKykOlffvX6WMcM9xIFsFhclxJaSUV8RPCk5Bi11ATNOudmj7",
	"B08gIGgRds0Cl8qpY2Uca5TwoIJdnSycIwZD5a70fVDSrW5a9kuKMQM6kl2C8uQtxXVHuQjvn/OVDOIi",
	"vMnux0h88g6m78ntUyqz71v6pvSjR+/qaUsffAQW5HL9mED6v03psPXtTD81z0/Nc6DmCZRGmqb5UcbT",
	"J+ylkIZ7DKXEFWEHmUoR4P/HjKUEpVI4KEmXnwbTT7X1H2ow7dRfviMYt5pS7Jf4JboH6ZOYsvo/pEX+",
	"Attr83riv9v6SrvMOIWl1CFJtFify5kgVUDq382WrtcEWoqCOk+dxCflJ0EO017VHzVAmmx+T+zakiyJ",
	"E6kfCIAdVEb/mV3cwARzK7aJgw/3cCzWW3dWeRQqKu4gAQEmPg9jSgCcUE+Ed797tvhom1eF3T83+b2b",
	"fHD5capoSBaIDg77v9EQOYiYAEJV2hdrng1ZcFIS/CIs6plWkNK4Gt7e/Jr/rxOkC3Uq1gwT5CGXp4lR",
	"4iLnD2UpanmAOA3Uz5dwVc8Z3cYokVE+eKDOSPyHMvJAHYWNGmtUCRaPrh3wl09HBlY/iyJAPBwb3Kzo",
	"V0dAEt60mAvB5WsfiOL6guyf8rhXHtfE2iGUieXeEsz/TllLiscBQherK/9Y5qJjHlLktuTMP7OPllAT",
	"iY0o+vUgHbmI6Hx93amStSj0r06SfyQZIZ4/BWO/YER3sO+Qi3ApPyMXP53Un07q/zUndUs3pek7BTxu",
	"U2ypmPWNWVvKJW1m6yYFdZpvV4lDrJ067veXiv56Dmnc7v+yAzVAQIyfYvbvETOf0f/zhAxGDARtG0T1",
	"TyE3rcVsf0QbEr/ogWjR+Sofs/WdRpMVUFtnuqAeHj9CQfN/adev/M17+M6lVB9A/N1PKf4pxZ+RYrTN",
	"QVJyoyKf3TvkbdAkne+TyAbglDxLz1rSILz37z/QtvhwOt+jOug0TdQPLliiuqf5t4JF9zAky7igi/Pq",
	"Im4LBz8NCF3s/8BITkUPEMuFt7sV5mVlcWwUlwloYmJ+NAAX0ET/4jCKiCS8ACoaZh+cr9///wAAAP//",
	"G21SOR57AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
