// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`
	Packages   *[]string     `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`
	Users               *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string `json:"code"`
	OperationId string `json:"operation_id"`
	Reason      string `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    int    `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string         `json:"architecture"`
	ImageType     ImageTypes     `json:"image_type"`
	Ostree        *OSTree        `json:"ostree,omitempty"`
	Repositories  []Repository   `json:"repositories"`
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`
	Rhsm        bool      `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// UploadOptions defines model for UploadOptions.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
