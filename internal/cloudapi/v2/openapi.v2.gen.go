// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for AzureUploadOptionsHyperVGeneration.
const (
	AzureUploadOptionsHyperVGenerationV1 AzureUploadOptionsHyperVGeneration = "V1"

	AzureUploadOptionsHyperVGenerationV2 AzureUploadOptionsHyperVGeneration = "V2"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Choose the VM Image HyperV generation, different features on Azure are available
	// depending on the HyperV generation.
	HyperVGeneration *AzureUploadOptionsHyperVGeneration `json:"hyper_v_generation,omitempty"`

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// Choose the VM Image HyperV generation, different features on Azure are available
// depending on the HyperV generation.
type AzureUploadOptionsHyperVGeneration string

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	Cacerts *CACertsCustomization `json:"cacerts,omitempty"`

	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CACertsCustomization defines model for CACertsCustomization.
type CACertsCustomization struct {
	PemCerts []string `json:"pem_certs"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeList defines model for ComposeList.
type ComposeList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []ComposeStatus `json:"items"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Cacerts    *CACertsCustomization `json:"cacerts,omitempty"`
	Containers *[]Container          `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// DepsolveRequest defines model for DepsolveRequest.
type DepsolveRequest struct {
	Architecture string        `json:"architecture"`
	Blueprint    Blueprint     `json:"blueprint"`
	Distribution string        `json:"distribution"`
	Repositories *[]Repository `json:"repositories,omitempty"`
}

// DepsolveResponse defines model for DepsolveResponse.
type DepsolveResponse struct {
	// Package list including NEVRA
	Packages []PackageMetadata `json:"packages"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions map[string]interface{}

// LocalUploadStatus defines model for LocalUploadStatus.
type LocalUploadStatus struct {
	ArtifactPath string `json:"artifact_path"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageDetails defines model for PackageDetails.
type PackageDetails struct {
	Arch        string  `json:"arch"`
	Buildtime   *string `json:"buildtime,omitempty"`
	Description *string `json:"description,omitempty"`
	Epoch       *string `json:"epoch,omitempty"`
	License     *string `json:"license,omitempty"`
	Name        string  `json:"name"`
	Release     string  `json:"release"`
	Summary     *string `json:"summary,omitempty"`
	Url         *string `json:"url,omitempty"`
	Version     string  `json:"version"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch string `json:"arch"`

	// Optional package checksum using ALGO:HASH form
	Checksum  *string `json:"checksum,omitempty"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    *string `json:"sigmd5,omitempty"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// SearchPackagesRequest defines model for SearchPackagesRequest.
type SearchPackagesRequest struct {
	Architecture string `json:"architecture"`
	Distribution string `json:"distribution"`

	// Array of package names to search for. Supports * wildcards for
	// names, but not for versions.
	Packages     []string      `json:"packages"`
	Repositories *[]Repository `json:"repositories,omitempty"`
}

// SearchPackagesResponse defines model for SearchPackagesResponse.
type SearchPackagesResponse struct {
	// Detailed package information from DNF
	Packages []PackageDetails `json:"packages"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// PostDepsolveBlueprintJSONBody defines parameters for PostDepsolveBlueprint.
type PostDepsolveBlueprintJSONBody DepsolveRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostSearchPackagesJSONBody defines parameters for PostSearchPackages.
type PostSearchPackagesJSONBody SearchPackagesRequest

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// PostDepsolveBlueprintJSONRequestBody defines body for PostDepsolveBlueprint for application/json ContentType.
type PostDepsolveBlueprintJSONRequestBody PostDepsolveBlueprintJSONBody

// PostSearchPackagesJSONRequestBody defines body for PostSearchPackages for application/json ContentType.
type PostSearchPackagesJSONRequestBody PostSearchPackagesJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The list of composes
	// (GET /composes/)
	GetComposeList(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Depsolve one or more blueprints
	// (POST /depsolve/blueprint)
	PostDepsolveBlueprint(ctx echo.Context) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
	// Search for detailed information on a list of package names
	// (POST /search/packages)
	PostSearchPackages(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeList converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeList(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// PostDepsolveBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) PostDepsolveBlueprint(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDepsolveBlueprint(ctx)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// PostSearchPackages converts echo context to params.
func (w *ServerInterfaceWrapper) PostSearchPackages(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSearchPackages(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/", wrapper.GetComposeList)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.POST(baseURL+"/depsolve/blueprint", wrapper.PostDepsolveBlueprint)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)
	router.POST(baseURL+"/search/packages", wrapper.PostSearchPackages)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TjjeAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
