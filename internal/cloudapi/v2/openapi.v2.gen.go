// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name   *string `json:"name,omitempty"`
	Source string  `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Gpgkey       *[]string `json:"gpgkey,omitempty"`
	Id           string    `json:"id"`
	Metalink     *string   `json:"metalink,omitempty"`
	Mirrorlist   *string   `json:"mirrorlist,omitempty"`
	Name         *string   `json:"name,omitempty"`
	RepoCheckGpg *bool     `json:"repo_check_gpg,omitempty"`
	SslVerify    *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`
	Files              *[]File             `json:"files,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA//+txImxK3oAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
