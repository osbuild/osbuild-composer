// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name   *string `json:"name,omitempty"`
	Source string  `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers       *[]Container                    `json:"containers,omitempty"`
	Filesystem       *[]Filesystem                   `json:"filesystem,omitempty"`
	Packages         *[]string                       `json:"packages,omitempty"`
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// CustomizationsPartitioningMode defines model for Customizations.PartitioningMode.
type CustomizationsPartitioningMode string

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQAA//9T8v0rym4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
