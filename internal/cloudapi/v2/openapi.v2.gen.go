// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	// If set to true, the resulting AMI will be made public. This means
	// that every AWS account will be able to use it.
	Public            *bool    `json:"public,omitempty"`
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name   *string `json:"name,omitempty"`
	Source string  `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container  `json:"containers,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`
	Packages   *[]string     `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wAAAP//HBkySw9sAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
