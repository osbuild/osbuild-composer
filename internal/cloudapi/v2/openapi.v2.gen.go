// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`
	Packages   *[]string     `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`
	Users               *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string `json:"code"`
	OperationId string `json:"operation_id"`
	Reason      string `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string         `json:"architecture"`
	ImageType     ImageTypes     `json:"image_type"`
	Ostree        *OSTree        `json:"ostree,omitempty"`
	Repositories  []Repository   `json:"repositories"`
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// UploadOptions defines model for UploadOptions.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"hdwNms/gfP/xfwMAAP//5Y1kUqFXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
