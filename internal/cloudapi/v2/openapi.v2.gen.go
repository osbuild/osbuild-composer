// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeDeleteStatus defines model for ComposeDeleteStatus.
type ComposeDeleteStatus ObjectReference

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeList defines model for ComposeList.
type ComposeList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []ComposeStatus `json:"items"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The list of composes
	// (GET /composes/)
	GetComposeList(ctx echo.Context) error
	// Delete a compose
	// (DELETE /composes/delete/{id})
	DeleteCompose(ctx echo.Context, id string) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeList converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeList(ctx)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, id)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/", wrapper.GetComposeList)
	router.DELETE(baseURL+"/composes/delete/:id", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
