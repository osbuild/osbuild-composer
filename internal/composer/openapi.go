// Package Composer provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Composer

import (
	"context"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
	"net/http"
)

// AWSUploadRequest defines model for AWSUploadRequest.
type AWSUploadRequest struct {
	Options struct {
		Ec2 struct {
			AccessKeyId     string `json:"access_key_id"`
			SecretAccessKey string `json:"secret_access_key"`
		} `json:"ec2"`
		Region string `json:"region"`
		S3     struct {
			AccessKeyId     string `json:"access_key_id"`
			Bucket          string `json:"bucket"`
			SecretAccessKey string `json:"secret_access_key"`
		} `json:"s3"`
	} `json:"options"`
	Type string `json:"type"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	AmiId *string `json:"ami_id,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations Customizations `json:"customizations"`
	Distribution   string         `json:"distribution"`
	ImageRequests  []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatuses []ImageStatus `json:"image_statuses"`
	Status        string        `json:"status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Subscription *struct {
		ActivationKey string  `json:"activation_key"`
		BaseUrl       *string `json:"base-url,omitempty"`
		Insights      bool    `json:"insights"`
		Organization  int     `json:"organization"`
		ServerUrl     *string `json:"server-url,omitempty"`
	} `json:"subscription,omitempty"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture   string          `json:"architecture"`
	ImageType      string          `json:"image_type"`
	Repositories   []Repository    `json:"repositories"`
	UploadRequests []UploadRequest `json:"upload_requests"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status         string         `json:"status"`
	UploadStatuses []UploadStatus `json:"upload_statuses"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl string `json:"baseurl"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus interface{}

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostComposeRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

type ServerInterface interface {
	// Create compose (POST /compose)
	PostCompose(w http.ResponseWriter, r *http.Request)
	// The status of a compose (GET /compose/{id})
	GetComposeId(w http.ResponseWriter, r *http.Request)
}

// PostCompose operation middleware
func PostComposeCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetComposeId operation middleware
func GetComposeIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id string

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(PostComposeCtx)
		r.Post("/compose", si.PostCompose)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetComposeIdCtx)
		r.Get("/compose/{id}", si.GetComposeId)
	})

	return r
}

